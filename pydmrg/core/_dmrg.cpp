/* Generated by Cython 0.20.1 on Wed Apr 30 17:14:03 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___dmrg
#define __PYX_HAVE_API___dmrg
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "config.h"
#include "MatrixBLAS.h"
#include "newmat.h"
#include "BaseOperator.h"
#include "wavefunction.h"
#include "IrrepSpace.h"
#include "SpinSpace.h"
#include "SpinQuantum.h"
#include "StateInfo.h"
#include "spinblock.h"
#include "sweep_params.h"
#include "solver.h"
#include "guess_wavefunction.h"
#include "input.h"
#include "itrf.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "_dmrg.pyx",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "type.pxd",
};

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5_dmrg_RawSpinQuantum;
struct __pyx_obj_5_dmrg_NewRawSpinQuantum;
struct __pyx_obj_5_dmrg_RawStateInfo;
struct __pyx_obj_5_dmrg_NewRawStateInfo;
struct __pyx_obj_5_dmrg_RawSpinBlock;
struct __pyx_obj_5_dmrg_NewRawSpinBlock;
struct __pyx_obj_5_dmrg_RawSparseMatrix;
struct __pyx_obj_5_dmrg_RawWavefunction;
struct __pyx_obj_5_dmrg_NewRawWavefunction;
struct __pyx_obj_5_dmrg_RawMatrix;
struct __pyx_obj_5_dmrg_RawRotationMatrix;
struct __pyx_obj_5_dmrg_NewRawRotationMatrix;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "_dmrg.pyx":287
 * # refer to other objects.  It does not deallocate Aclass._this when the object
 * # is destroyed by python.
 * cdef class RawSpinQuantum:             # <<<<<<<<<<<<<<
 *     cdef SpinQuantum *_this
 *     property particleNumber:
 */
struct __pyx_obj_5_dmrg_RawSpinQuantum {
  PyObject_HEAD
  SpinAdapted::SpinQuantum *_this;
};


/* "_dmrg.pyx":296
 *         #def __set__(self, x): self._this.totalSpin = x
 *     def irrep(self): return x_SpinQuantum_irrep(self._this)
 * cdef class NewRawSpinQuantum(RawSpinQuantum):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self._this = new SpinQuantum()
 */
struct __pyx_obj_5_dmrg_NewRawSpinQuantum {
  struct __pyx_obj_5_dmrg_RawSpinQuantum __pyx_base;
};


/* "_dmrg.pyx":308
 * 
 * 
 * cdef class RawStateInfo:             # <<<<<<<<<<<<<<
 *     cdef StateInfo *_this
 *     property totalStates:
 */
struct __pyx_obj_5_dmrg_RawStateInfo {
  PyObject_HEAD
  SpinAdapted::StateInfo *_this;
};


/* "_dmrg.pyx":355
 *     def load(self, filesi):
 *         load_stateinfo(filesi, self._this)
 * cdef class NewRawStateInfo(RawStateInfo):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self._this = new StateInfo()
 */
struct __pyx_obj_5_dmrg_NewRawStateInfo {
  struct __pyx_obj_5_dmrg_RawStateInfo __pyx_base;
};


/* "_dmrg.pyx":374
 * 
 * 
 * cdef class RawSpinBlock:             # <<<<<<<<<<<<<<
 *     cdef SpinBlock *_this
 *     def get_braStateInfo(self):
 */
struct __pyx_obj_5_dmrg_RawSpinBlock {
  PyObject_HEAD
  SpinAdapted::SpinBlock *_this;
};


/* "_dmrg.pyx":394
 *     def save(self, filespinblock):
 *         save_spinblock(filespinblock, self._this)
 * cdef class NewRawSpinBlock(RawSpinBlock):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self._this = new SpinBlock()
 */
struct __pyx_obj_5_dmrg_NewRawSpinBlock {
  struct __pyx_obj_5_dmrg_RawSpinBlock __pyx_base;
};


/* "_dmrg.pyx":460
 * 
 * 
 * cdef class RawSparseMatrix:             # <<<<<<<<<<<<<<
 *     cdef SparseMatrix *_this
 *     def get_orbs(self): return self._this.get_orbs()
 */
struct __pyx_obj_5_dmrg_RawSparseMatrix {
  PyObject_HEAD
  SpinAdapted::SparseMatrix *_this;
};


/* "_dmrg.pyx":468
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 * 
 * cdef class RawWavefunction:             # <<<<<<<<<<<<<<
 *     cdef Wavefunction *_this
 *     #cdef readonly NewRawStateInfo stateInfo
 */
struct __pyx_obj_5_dmrg_RawWavefunction {
  PyObject_HEAD
  SpinAdapted::Wavefunction *_this;
};


/* "_dmrg.pyx":487
 *     def save(self, wfnfile, RawStateInfo stateInfo):
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 * cdef class NewRawWavefunction(RawWavefunction):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self._this = new Wavefunction()
 */
struct __pyx_obj_5_dmrg_NewRawWavefunction {
  struct __pyx_obj_5_dmrg_RawWavefunction __pyx_base;
};


/* "_dmrg.pyx":514
 * 
 * 
 * cdef class RawMatrix:             # <<<<<<<<<<<<<<
 *     cdef Matrix *_this
 *     def get_shape(self):
 */
struct __pyx_obj_5_dmrg_RawMatrix {
  PyObject_HEAD
  Matrix *_this;
};


/* "_dmrg.pyx":519
 *         return self._this.Nrows(), self._this.Ncols()
 * 
 * cdef class RawRotationMatrix:             # <<<<<<<<<<<<<<
 *     cdef vector[Matrix] *_this
 *     def get_matrix_by_quanta_id(self, quanta_id):
 */
struct __pyx_obj_5_dmrg_RawRotationMatrix {
  PyObject_HEAD
  std::vector<Matrix> *_this;
};


/* "_dmrg.pyx":535
 *     def save(self, filerotmat):
 *         save_rotmat(filerotmat, self._this)
 * cdef class NewRawRotationMatrix(RawRotationMatrix):             # <<<<<<<<<<<<<<
 *     def __cinit__(self):
 *         self._this = new vector[Matrix]()
 */
struct __pyx_obj_5_dmrg_NewRawRotationMatrix {
  struct __pyx_obj_5_dmrg_RawRotationMatrix __pyx_base;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from '_dmrg' */
static PyTypeObject *__pyx_ptype_5_dmrg_RawSpinQuantum = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_NewRawSpinQuantum = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawStateInfo = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_NewRawStateInfo = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawSpinBlock = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_NewRawSpinBlock = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawSparseMatrix = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawWavefunction = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_NewRawWavefunction = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawMatrix = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_RawRotationMatrix = 0;
static PyTypeObject *__pyx_ptype_5_dmrg_NewRawRotationMatrix = 0;
static std::vector<int> __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int> &); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static std::vector<double> __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double> &); /*proto*/
#define __Pyx_MODULE_NAME "_dmrg"
int __pyx_module_is_main__dmrg = 0;

/* Implementation of '_dmrg' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_14particleNumber___get__(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_9totalSpin___get__(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_irrep(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self); /* proto */
static int __pyx_pf_5_dmrg_17NewRawSpinQuantum___cinit__(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self); /* proto */
static void __pyx_pf_5_dmrg_17NewRawSpinQuantum_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_17NewRawSpinQuantum_4init(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self, PyObject *__pyx_v_nparticle, PyObject *__pyx_v_spin, PyObject *__pyx_v_irrep_id); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_11totalStates___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_12quantaStates___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_12newQuantaMap___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_get_quanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_2get_quantaMap(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_lquanta_id, PyObject *__pyx_v_rquanta_id); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_4get_allowedQuanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_lquanta_id, PyObject *__pyx_v_rquanta_id); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_6get_whole_allowedQuanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_15leftUnMapQuanta___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_16rightUnMapQuanta___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_13leftStateInfo___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_14rightStateInfo___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_8save(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_filesi); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_10load(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_filesi); /* proto */
static int __pyx_pf_5_dmrg_15NewRawStateInfo___cinit__(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self); /* proto */
static void __pyx_pf_5_dmrg_15NewRawStateInfo_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawStateInfo_4init_by_a_spinquantum(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self, struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_sq); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawStateInfo_6set_unCollectedStateInfo(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_old); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_get_braStateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_2get_ketStateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_4get_stateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_5sites___get__(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_6printOperatorSummary(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_8save(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self, PyObject *__pyx_v_filespinblock); /* proto */
static int __pyx_pf_5_dmrg_15NewRawSpinBlock___cinit__(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static void __pyx_pf_5_dmrg_15NewRawSpinBlock_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_4load(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_filespinblock); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_6init_by_dot_id(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, int __pyx_v_start, int __pyx_v_finish, PyObject *__pyx_v_implicitTranspose, PyObject *__pyx_v_is_complement); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_8init_by_stateinfo(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_10BuildTensorProductBlock(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_sites); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_12default_op_components(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_direct, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lBlock, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rBlock, PyObject *__pyx_v_haveNormops, PyObject *__pyx_v_haveCompops, PyObject *__pyx_v_implicitTranspose, PyObject *__pyx_v_storagetype); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_14default_op_components_compl(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_complementary, PyObject *__pyx_v_implicitTranspose); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_16set_complementary_sites(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, std::vector<int> __pyx_v_c_sites); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_18set_twoInt(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_20build_ops(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_22addAdditionalCompOps(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_24set_big_components(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_26transform_operators(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_rotatemat); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_28sync(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lblock, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rblock, std::vector<int> __pyx_v_sites, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_bra, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_ket); /* proto */
static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_30set_loopblock(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_tf); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_get_orbs(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_2get_sign(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_4get_fermion(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_6allowed(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_8get_shape(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_get_deltaQuantum(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_2get_onedot(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_4get_orbs(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_6get_sign(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_8get_fermion(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_10allowed(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_12get_shape(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_14save(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self, PyObject *__pyx_v_wfnfile, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stateInfo); /* proto */
static int __pyx_pf_5_dmrg_18NewRawWavefunction___cinit__(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self); /* proto */
static void __pyx_pf_5_dmrg_18NewRawWavefunction_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_18NewRawWavefunction_4load(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self, PyObject *__pyx_v_wfnfile); /* proto */
static PyObject *__pyx_pf_5_dmrg_9RawMatrix_get_shape(struct __pyx_obj_5_dmrg_RawMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_get_matrix_by_quanta_id(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_quanta_id); /* proto */
static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_2get_size(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_4save(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_filerotmat); /* proto */
static int __pyx_pf_5_dmrg_20NewRawRotationMatrix___cinit__(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self); /* proto */
static void __pyx_pf_5_dmrg_20NewRawRotationMatrix_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_20NewRawRotationMatrix_4load(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_filerotmat); /* proto */
static PyObject *__pyx_pf_5_dmrg_PyTensorProduct(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_a, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_b, int __pyx_v_constraint); /* proto */
static PyObject *__pyx_pf_5_dmrg_2Pyupdate_rotmat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfn, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_sys, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big, PyObject *__pyx_v_keep_states, PyObject *__pyx_v_keep_qstates, PyObject *__pyx_v_noise); /* proto */
static PyObject *__pyx_pf_5_dmrg_4Pyunion_StateInfo_quanta(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_dest, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_source); /* proto */
static PyObject *__pyx_pf_5_dmrg_6PyBuildSlaterBlock_with_stateinfo(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_environ, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si, PyObject *__pyx_v_envSites, PyObject *__pyx_v_haveNormops); /* proto */
static PyObject *__pyx_pf_5_dmrg_8Pysolve_wavefunction(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big, PyObject *__pyx_v_nroots, PyObject *__pyx_v_dot_with_sys, PyObject *__pyx_v_warmUp, PyObject *__pyx_v_onedot, PyObject *__pyx_v_tol, PyObject *__pyx_v_guesstype, PyObject *__pyx_v_additional_noise); /* proto */
static PyObject *__pyx_pf_5_dmrg_10Pyonedot_shufflesysdot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_sguess, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stranspose, struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfguess); /* proto */
static PyObject *__pyx_pf_5_dmrg_12Pyguess_rotmat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_newsys, PyObject *__pyx_v_keep_states); /* proto */
static PyObject *__pyx_pf_5_dmrg_14Pyinitialize_defaults(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_inp_conf); /* proto */
static PyObject *__pyx_pf_5_dmrg_16Pyget_last_site_id(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5_dmrg_18Pysync2dmrginp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv); /* proto */
static PyObject *__pyx_pf_5_dmrg_20Pysync_from_dmrginp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5_dmrg_RawSpinQuantum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_NewRawSpinQuantum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawStateInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_NewRawStateInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawSpinBlock(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_NewRawSpinBlock(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawSparseMatrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawWavefunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_NewRawWavefunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawMatrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_RawRotationMatrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5_dmrg_NewRawRotationMatrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_c[] = "c";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_gt[] = "gt";
static char __pyx_k_os[] = "os";
static char __pyx_k_si[] = "si";
static char __pyx_k_big[] = "big";
static char __pyx_k_bra[] = "bra";
static char __pyx_k_ket[] = "ket";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_tol[] = "tol";
static char __pyx_k_wfn[] = "wfn";
static char __pyx_k_dest[] = "dest";
static char __pyx_k_dmrg[] = "_dmrg";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_maxM[] = "maxM";
static char __pyx_k_rmat[] = "rmat";
static char __pyx_k_spin[] = "spin";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_bool8[] = "bool8";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_lastM[] = "lastM";
static char __pyx_k_nelec[] = "nelec";
static char __pyx_k_noise[] = "noise";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_sites[] = "sites";
static char __pyx_k_start[] = "start";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_direct[] = "direct";
static char __pyx_k_do_fci[] = "do_fci";
static char __pyx_k_finish[] = "finish";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_lBlock[] = "lBlock";
static char __pyx_k_lblock[] = "lblock";
static char __pyx_k_newsys[] = "newsys";
static char __pyx_k_nroots[] = "nroots";
static char __pyx_k_onedot[] = "onedot";
static char __pyx_k_rBlock[] = "rBlock";
static char __pyx_k_rblock[] = "rblock";
static char __pyx_k_rotmat[] = "rotmat";
static char __pyx_k_sguess[] = "sguess";
static char __pyx_k_source[] = "source";
static char __pyx_k_startM[] = "startM";
static char __pyx_k_warmUp[] = "warmUp";
static char __pyx_k_dmrgenv[] = "dmrgenv";
static char __pyx_k_environ[] = "environ";
static char __pyx_k_maxiter[] = "maxiter";
static char __pyx_k_nquanta[] = "nquanta";
static char __pyx_k_reorder[] = "reorder";
static char __pyx_k_sys_add[] = "sys_add";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_wfguess[] = "wfguess";
static char __pyx_k_wfnfile[] = "wfnfile";
static char __pyx_k_energies[] = "energies";
static char __pyx_k_envSites[] = "envSites";
static char __pyx_k_ham_type[] = "ham_type";
static char __pyx_k_inp_conf[] = "inp_conf";
static char __pyx_k_irrep_id[] = "irrep_id";
static char __pyx_k_solution[] = "solution";
static char __pyx_k_calc_type[] = "calc_type";
static char __pyx_k_guesstype[] = "guesstype";
static char __pyx_k_nparticle[] = "nparticle";
static char __pyx_k_orbformat[] = "orbformat";
static char __pyx_k_stateInfo[] = "stateInfo";
static char __pyx_k_sweep_tol[] = "sweep_tol";
static char __pyx_k_tot_sites[] = "tot_sites";
static char __pyx_k_Bogoliubov[] = "Bogoliubov";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_constraint[] = "constraint";
static char __pyx_k_gaconffile[] = "gaconffile";
static char __pyx_k_lquanta_id[] = "lquanta_id";
static char __pyx_k_noise_type[] = "noise_type";
static char __pyx_k_rquanta_id[] = "rquanta_id";
static char __pyx_k_solve_type[] = "solve_type";
static char __pyx_k_stranspose[] = "stranspose";
static char __pyx_k_core_energy[] = "core_energy";
static char __pyx_k_currentRoot[] = "currentRoot";
static char __pyx_k_do_npdm_ops[] = "do_npdm_ops";
static char __pyx_k_haveCompops[] = "haveCompops";
static char __pyx_k_haveNormops[] = "haveNormops";
static char __pyx_k_hf_occ_user[] = "hf_occ_user";
static char __pyx_k_keep_states[] = "keep_states";
static char __pyx_k_lowerStates[] = "lowerStates";
static char __pyx_k_outputlevel[] = "outputlevel";
static char __pyx_k_reorderType[] = "reorderType";
static char __pyx_k_reorderfile[] = "reorderfile";
static char __pyx_k_spinAdapted[] = "spinAdapted";
static char __pyx_k_storagetype[] = "storagetype";
static char __pyx_k_wftranspose[] = "wftranspose";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_dot_with_sys[] = "dot_with_sys";
static char __pyx_k_hf_occupancy[] = "hf_occupancy";
static char __pyx_k_keep_qstates[] = "keep_qstates";
static char __pyx_k_complementary[] = "complementary";
static char __pyx_k_cratch_prefix[] = "cratch_prefix";
static char __pyx_k_is_complement[] = "is_complement";
static char __pyx_k_new_npdm_code[] = "new_npdm_code";
static char __pyx_k_Pyguess_rotmat[] = "Pyguess_rotmat";
static char __pyx_k_Pysync2dmrginp[] = "Pysync2dmrginp";
static char __pyx_k_algorithm_type[] = "algorithm_type";
static char __pyx_k_noise_schedule[] = "noise_schedule";
static char __pyx_k_scratch_prefix[] = "scratch_prefix";
static char __pyx_k_PyTensorProduct[] = "PyTensorProduct";
static char __pyx_k_Pyupdate_rotmat[] = "Pyupdate_rotmat";
static char __pyx_k_do_npdm_in_core[] = "do_npdm_in_core";
static char __pyx_k_spatial_to_spin[] = "spatial_to_spin";
static char __pyx_k_spin_to_spatial[] = "spin_to_spatial";
static char __pyx_k_additional_noise[] = "additional_noise";
static char __pyx_k_get_braStateInfo[] = "get_braStateInfo";
static char __pyx_k_implicitTranspose[] = "implicitTranspose";
static char __pyx_k_Pyget_last_site_id[] = "Pyget_last_site_id";
static char __pyx_k_deflation_max_size[] = "deflation_max_size";
static char __pyx_k_deflation_min_size[] = "deflation_min_size";
static char __pyx_k_onedot_start_cycle[] = "onedot_start_cycle";
static char __pyx_k_spin_orbs_symmetry[] = "spin_orbs_symmetry";
static char __pyx_k_Pysync_from_dmrginp[] = "Pysync_from_dmrginp";
static char __pyx_k_oneindex_screen_tol[] = "oneindex_screen_tol";
static char __pyx_k_sweep_iter_schedule[] = "sweep_iter_schedule";
static char __pyx_k_twoindex_screen_tol[] = "twoindex_screen_tol";
static char __pyx_k_Pysolve_wavefunction[] = "Pysolve_wavefunction";
static char __pyx_k_sweep_state_schedule[] = "sweep_state_schedule";
static char __pyx_k_Pyinitialize_defaults[] = "Pyinitialize_defaults";
static char __pyx_k_davidson_tol_schedule[] = "davidson_tol_schedule";
static char __pyx_k_max_lanczos_dimension[] = "max_lanczos_dimension";
static char __pyx_k_Pyonedot_shufflesysdot[] = "Pyonedot_shufflesysdot";
static char __pyx_k_add_noninteracting_orbs[] = "add_noninteracting_orbs";
static char __pyx_k_Pyunion_StateInfo_quanta[] = "Pyunion_StateInfo_quanta";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_home_sunqm_workspace_program_py[] = "/home/sunqm/workspace/program/pydmrg/core/_dmrg.pyx";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_PyBuildSlaterBlock_with_stateinf[] = "PyBuildSlaterBlock_with_stateinfo";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_Bogoliubov;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_PyBuildSlaterBlock_with_stateinf;
static PyObject *__pyx_n_s_PyTensorProduct;
static PyObject *__pyx_n_s_Pyget_last_site_id;
static PyObject *__pyx_n_s_Pyguess_rotmat;
static PyObject *__pyx_n_s_Pyinitialize_defaults;
static PyObject *__pyx_n_s_Pyonedot_shufflesysdot;
static PyObject *__pyx_n_s_Pysolve_wavefunction;
static PyObject *__pyx_n_s_Pysync2dmrginp;
static PyObject *__pyx_n_s_Pysync_from_dmrginp;
static PyObject *__pyx_n_s_Pyunion_StateInfo_quanta;
static PyObject *__pyx_n_s_Pyupdate_rotmat;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_add_noninteracting_orbs;
static PyObject *__pyx_n_s_additional_noise;
static PyObject *__pyx_n_s_algorithm_type;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_big;
static PyObject *__pyx_n_s_bool8;
static PyObject *__pyx_n_s_bra;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_calc_type;
static PyObject *__pyx_n_s_complementary;
static PyObject *__pyx_n_s_constraint;
static PyObject *__pyx_n_s_core_energy;
static PyObject *__pyx_n_s_cratch_prefix;
static PyObject *__pyx_n_s_currentRoot;
static PyObject *__pyx_n_s_davidson_tol_schedule;
static PyObject *__pyx_n_s_deflation_max_size;
static PyObject *__pyx_n_s_deflation_min_size;
static PyObject *__pyx_n_s_dest;
static PyObject *__pyx_n_s_direct;
static PyObject *__pyx_n_s_dmrg;
static PyObject *__pyx_n_s_dmrgenv;
static PyObject *__pyx_n_s_do_fci;
static PyObject *__pyx_n_s_do_npdm_in_core;
static PyObject *__pyx_n_s_do_npdm_ops;
static PyObject *__pyx_n_s_dot_with_sys;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_energies;
static PyObject *__pyx_n_s_envSites;
static PyObject *__pyx_n_s_environ;
static PyObject *__pyx_n_s_finish;
static PyObject *__pyx_n_s_gaconffile;
static PyObject *__pyx_n_s_get_braStateInfo;
static PyObject *__pyx_n_s_gt;
static PyObject *__pyx_n_s_guesstype;
static PyObject *__pyx_n_s_ham_type;
static PyObject *__pyx_n_s_haveCompops;
static PyObject *__pyx_n_s_haveNormops;
static PyObject *__pyx_n_s_hf_occ_user;
static PyObject *__pyx_n_s_hf_occupancy;
static PyObject *__pyx_kp_s_home_sunqm_workspace_program_py;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_implicitTranspose;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inp_conf;
static PyObject *__pyx_n_s_irrep_id;
static PyObject *__pyx_n_s_is_complement;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_keep_qstates;
static PyObject *__pyx_n_s_keep_states;
static PyObject *__pyx_n_s_ket;
static PyObject *__pyx_n_s_lBlock;
static PyObject *__pyx_n_s_lastM;
static PyObject *__pyx_n_s_lblock;
static PyObject *__pyx_n_s_lowerStates;
static PyObject *__pyx_n_s_lquanta_id;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxM;
static PyObject *__pyx_n_s_max_lanczos_dimension;
static PyObject *__pyx_n_s_maxiter;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_nelec;
static PyObject *__pyx_n_s_new_npdm_code;
static PyObject *__pyx_n_s_newsys;
static PyObject *__pyx_n_s_noise;
static PyObject *__pyx_n_s_noise_schedule;
static PyObject *__pyx_n_s_noise_type;
static PyObject *__pyx_n_s_nparticle;
static PyObject *__pyx_n_s_nquanta;
static PyObject *__pyx_n_s_nroots;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_onedot;
static PyObject *__pyx_n_s_onedot_start_cycle;
static PyObject *__pyx_n_s_oneindex_screen_tol;
static PyObject *__pyx_n_s_orbformat;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_outputlevel;
static PyObject *__pyx_n_s_rBlock;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rblock;
static PyObject *__pyx_n_s_reorder;
static PyObject *__pyx_n_s_reorderType;
static PyObject *__pyx_n_s_reorderfile;
static PyObject *__pyx_n_s_rmat;
static PyObject *__pyx_n_s_rotmat;
static PyObject *__pyx_n_s_rquanta_id;
static PyObject *__pyx_n_s_scratch_prefix;
static PyObject *__pyx_n_s_sguess;
static PyObject *__pyx_n_s_si;
static PyObject *__pyx_n_s_sites;
static PyObject *__pyx_n_s_solution;
static PyObject *__pyx_n_s_solve_type;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_spatial_to_spin;
static PyObject *__pyx_n_s_spin;
static PyObject *__pyx_n_s_spinAdapted;
static PyObject *__pyx_n_s_spin_orbs_symmetry;
static PyObject *__pyx_n_s_spin_to_spatial;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_startM;
static PyObject *__pyx_n_s_stateInfo;
static PyObject *__pyx_n_s_storagetype;
static PyObject *__pyx_n_s_stranspose;
static PyObject *__pyx_n_s_sweep_iter_schedule;
static PyObject *__pyx_n_s_sweep_state_schedule;
static PyObject *__pyx_n_s_sweep_tol;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_sys_add;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_n_s_tot_sites;
static PyObject *__pyx_n_s_twoindex_screen_tol;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_warmUp;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_wfguess;
static PyObject *__pyx_n_s_wfn;
static PyObject *__pyx_n_s_wfnfile;
static PyObject *__pyx_n_s_wftranspose;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;

/* "_dmrg.pyx":290
 *     cdef SpinQuantum *_this
 *     property particleNumber:
 *         def __get__(self): return self._this.particleNumber             # <<<<<<<<<<<<<<
 *         #def __set__(self, x): self._this.particleNumber = x
 *     property totalSpin:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_14particleNumber_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_14particleNumber_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_14RawSpinQuantum_14particleNumber___get__(((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_14particleNumber___get__(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->particleNumber); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinQuantum.particleNumber.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":293
 *         #def __set__(self, x): self._this.particleNumber = x
 *     property totalSpin:
 *         def __get__(self): return self._this.totalSpin.getirrep()             # <<<<<<<<<<<<<<
 *         #def __set__(self, x): self._this.totalSpin = x
 *     def irrep(self): return x_SpinQuantum_irrep(self._this)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_9totalSpin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_9totalSpin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_14RawSpinQuantum_9totalSpin___get__(((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_9totalSpin___get__(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->totalSpin.getirrep()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinQuantum.totalSpin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":295
 *         def __get__(self): return self._this.totalSpin.getirrep()
 *         #def __set__(self, x): self._this.totalSpin = x
 *     def irrep(self): return x_SpinQuantum_irrep(self._this)             # <<<<<<<<<<<<<<
 * cdef class NewRawSpinQuantum(RawSpinQuantum):
 *     def __cinit__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_1irrep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_14RawSpinQuantum_1irrep(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("irrep (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_14RawSpinQuantum_irrep(((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_14RawSpinQuantum_irrep(struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("irrep", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(x_SpinQuantum_irrep(__pyx_v_self->_this)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinQuantum.irrep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":297
 *     def irrep(self): return x_SpinQuantum_irrep(self._this)
 * cdef class NewRawSpinQuantum(RawSpinQuantum):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new SpinQuantum()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5_dmrg_17NewRawSpinQuantum_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5_dmrg_17NewRawSpinQuantum_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5_dmrg_17NewRawSpinQuantum___cinit__(((struct __pyx_obj_5_dmrg_NewRawSpinQuantum *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5_dmrg_17NewRawSpinQuantum___cinit__(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_dmrg.pyx":298
 * cdef class NewRawSpinQuantum(RawSpinQuantum):
 *     def __cinit__(self):
 *         self._this = new SpinQuantum()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._this
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::SpinQuantum();

  /* "_dmrg.pyx":297
 *     def irrep(self): return x_SpinQuantum_irrep(self._this)
 * cdef class NewRawSpinQuantum(RawSpinQuantum):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new SpinQuantum()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":299
 *     def __cinit__(self):
 *         self._this = new SpinQuantum()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def init(self, nparticle, spin, irrep_id):
 */

/* Python wrapper */
static void __pyx_pw_5_dmrg_17NewRawSpinQuantum_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5_dmrg_17NewRawSpinQuantum_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5_dmrg_17NewRawSpinQuantum_2__dealloc__(((struct __pyx_obj_5_dmrg_NewRawSpinQuantum *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5_dmrg_17NewRawSpinQuantum_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_dmrg.pyx":300
 *         self._this = new SpinQuantum()
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 *     def init(self, nparticle, spin, irrep_id):
 *         del self._this
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":299
 *     def __cinit__(self):
 *         self._this = new SpinQuantum()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def init(self, nparticle, spin, irrep_id):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_dmrg.pyx":301
 *     def __dealloc__(self):
 *         del self._this
 *     def init(self, nparticle, spin, irrep_id):             # <<<<<<<<<<<<<<
 *         del self._this
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_17NewRawSpinQuantum_5init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_17NewRawSpinQuantum_5init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nparticle = 0;
  PyObject *__pyx_v_spin = 0;
  PyObject *__pyx_v_irrep_id = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nparticle,&__pyx_n_s_spin,&__pyx_n_s_irrep_id,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nparticle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_irrep_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_nparticle = values[0];
    __pyx_v_spin = values[1];
    __pyx_v_irrep_id = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinQuantum.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_17NewRawSpinQuantum_4init(((struct __pyx_obj_5_dmrg_NewRawSpinQuantum *)__pyx_v_self), __pyx_v_nparticle, __pyx_v_spin, __pyx_v_irrep_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_17NewRawSpinQuantum_4init(struct __pyx_obj_5_dmrg_NewRawSpinQuantum *__pyx_v_self, PyObject *__pyx_v_nparticle, PyObject *__pyx_v_spin, PyObject *__pyx_v_irrep_id) {
  SpinAdapted::IrrepSpace *__pyx_v_irrep;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "_dmrg.pyx":302
 *         del self._this
 *     def init(self, nparticle, spin, irrep_id):
 *         del self._this             # <<<<<<<<<<<<<<
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)
 *         self._this = new SpinQuantum(nparticle, SpinSpace(spin), irrep[0])
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":303
 *     def init(self, nparticle, spin, irrep_id):
 *         del self._this
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)             # <<<<<<<<<<<<<<
 *         self._this = new SpinQuantum(nparticle, SpinSpace(spin), irrep[0])
 *         del irrep
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_irrep_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_irrep = new SpinAdapted::IrrepSpace(__pyx_t_1);

  /* "_dmrg.pyx":304
 *         del self._this
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)
 *         self._this = new SpinQuantum(nparticle, SpinSpace(spin), irrep[0])             # <<<<<<<<<<<<<<
 *         del irrep
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nparticle); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_spin); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base._this = new SpinAdapted::SpinQuantum(__pyx_t_1, SpinAdapted::SpinSpace(__pyx_t_2), (__pyx_v_irrep[0]));

  /* "_dmrg.pyx":305
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)
 *         self._this = new SpinQuantum(nparticle, SpinSpace(spin), irrep[0])
 *         del irrep             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_irrep;

  /* "_dmrg.pyx":301
 *     def __dealloc__(self):
 *         del self._this
 *     def init(self, nparticle, spin, irrep_id):             # <<<<<<<<<<<<<<
 *         del self._this
 *         cdef IrrepSpace *irrep = new IrrepSpace(irrep_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinQuantum.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":311
 *     cdef StateInfo *_this
 *     property totalStates:
 *         def __get__(self): return self._this.totalStates             # <<<<<<<<<<<<<<
 *         #def __set__(self, x): self._this.totalStates = x
 *     property quantaStates:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_11totalStates_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_11totalStates_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_11totalStates___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_11totalStates___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->totalStates); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.totalStates.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":314
 *         #def __set__(self, x): self._this.totalStates = x
 *     property quantaStates:
 *         def __get__(self): return self._this.quantaStates             # <<<<<<<<<<<<<<
 *         #def __set__(self, x): self._this.quantaStates = x
 *     property newQuantaMap:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_12quantaStates_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_12quantaStates_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_12quantaStates___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_12quantaStates___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->quantaStates); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.quantaStates.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":317
 *         #def __set__(self, x): self._this.quantaStates = x
 *     property newQuantaMap:
 *         def __get__(self): return self._this.newQuantaMap             # <<<<<<<<<<<<<<
 *     def get_quanta(self, i):
 *         cdef SpinQuantum *p = &self._this.quanta[i]
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_12newQuantaMap_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_12newQuantaMap_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_12newQuantaMap___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_12newQuantaMap___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->newQuantaMap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.newQuantaMap.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":318
 *     property newQuantaMap:
 *         def __get__(self): return self._this.newQuantaMap
 *     def get_quanta(self, i):             # <<<<<<<<<<<<<<
 *         cdef SpinQuantum *p = &self._this.quanta[i]
 *         rawq = RawSpinQuantum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_1get_quanta(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_1get_quanta(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_quanta (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_get_quanta(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_get_quanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_i) {
  SpinAdapted::SpinQuantum *__pyx_v_p;
  struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_rawq = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_quanta", 0);

  /* "_dmrg.pyx":319
 *         def __get__(self): return self._this.newQuantaMap
 *     def get_quanta(self, i):
 *         cdef SpinQuantum *p = &self._this.quanta[i]             # <<<<<<<<<<<<<<
 *         rawq = RawSpinQuantum()
 *         rawq._this = p
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_p = (&(__pyx_v_self->_this->quanta[__pyx_t_1]));

  /* "_dmrg.pyx":320
 *     def get_quanta(self, i):
 *         cdef SpinQuantum *p = &self._this.quanta[i]
 *         rawq = RawSpinQuantum()             # <<<<<<<<<<<<<<
 *         rawq._this = p
 *         return rawq
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawSpinQuantum)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rawq = ((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "_dmrg.pyx":321
 *         cdef SpinQuantum *p = &self._this.quanta[i]
 *         rawq = RawSpinQuantum()
 *         rawq._this = p             # <<<<<<<<<<<<<<
 *         return rawq
 *     def get_quantaMap(self, lquanta_id, rquanta_id):
 */
  __pyx_v_rawq->_this = __pyx_v_p;

  /* "_dmrg.pyx":322
 *         rawq = RawSpinQuantum()
 *         rawq._this = p
 *         return rawq             # <<<<<<<<<<<<<<
 *     def get_quantaMap(self, lquanta_id, rquanta_id):
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rawq));
  __pyx_r = ((PyObject *)__pyx_v_rawq);
  goto __pyx_L0;

  /* "_dmrg.pyx":318
 *     property newQuantaMap:
 *         def __get__(self): return self._this.newQuantaMap
 *     def get_quanta(self, i):             # <<<<<<<<<<<<<<
 *         cdef SpinQuantum *p = &self._this.quanta[i]
 *         rawq = RawSpinQuantum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_quanta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rawq);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":323
 *         rawq._this = p
 *         return rawq
 *     def get_quantaMap(self, lquanta_id, rquanta_id):             # <<<<<<<<<<<<<<
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,
 *                                                        rquanta_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_3get_quantaMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_3get_quantaMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lquanta_id = 0;
  PyObject *__pyx_v_rquanta_id = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_quantaMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lquanta_id,&__pyx_n_s_rquanta_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lquanta_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rquanta_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_quantaMap", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_quantaMap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lquanta_id = values[0];
    __pyx_v_rquanta_id = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_quantaMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_quantaMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_2get_quantaMap(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self), __pyx_v_lquanta_id, __pyx_v_rquanta_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_2get_quantaMap(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_lquanta_id, PyObject *__pyx_v_rquanta_id) {
  std::vector<int> *__pyx_v_qmap;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_quantaMap", 0);

  /* "_dmrg.pyx":324
 *         return rawq
 *     def get_quantaMap(self, lquanta_id, rquanta_id):
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,             # <<<<<<<<<<<<<<
 *                                                        rquanta_id)
 *         return qmap[0]
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_lquanta_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":325
 *     def get_quantaMap(self, lquanta_id, rquanta_id):
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,
 *                                                        rquanta_id)             # <<<<<<<<<<<<<<
 *         return qmap[0]
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_rquanta_id); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":324
 *         return rawq
 *     def get_quantaMap(self, lquanta_id, rquanta_id):
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,             # <<<<<<<<<<<<<<
 *                                                        rquanta_id)
 *         return qmap[0]
 */
  __pyx_v_qmap = x_StateInfo_quantaMap(__pyx_v_self->_this, __pyx_t_1, __pyx_t_2);

  /* "_dmrg.pyx":326
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,
 *                                                        rquanta_id)
 *         return qmap[0]             # <<<<<<<<<<<<<<
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_vector_to_py_int((__pyx_v_qmap[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":323
 *         rawq._this = p
 *         return rawq
 *     def get_quantaMap(self, lquanta_id, rquanta_id):             # <<<<<<<<<<<<<<
 *         cdef vector[int] *qmap = x_StateInfo_quantaMap(self._this, lquanta_id,
 *                                                        rquanta_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_quantaMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":327
 *                                                        rquanta_id)
 *         return qmap[0]
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):             # <<<<<<<<<<<<<<
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,
 *                                                  rquanta_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_5get_allowedQuanta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_5get_allowedQuanta(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lquanta_id = 0;
  PyObject *__pyx_v_rquanta_id = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_allowedQuanta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lquanta_id,&__pyx_n_s_rquanta_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lquanta_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rquanta_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_allowedQuanta", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_allowedQuanta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lquanta_id = values[0];
    __pyx_v_rquanta_id = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_allowedQuanta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_allowedQuanta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_4get_allowedQuanta(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self), __pyx_v_lquanta_id, __pyx_v_rquanta_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_4get_allowedQuanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_lquanta_id, PyObject *__pyx_v_rquanta_id) {
  char *__pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_allowedQuanta", 0);

  /* "_dmrg.pyx":328
 *         return qmap[0]
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,             # <<<<<<<<<<<<<<
 *                                                  rquanta_id)
 *         return a[0]
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_lquanta_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":329
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,
 *                                                  rquanta_id)             # <<<<<<<<<<<<<<
 *         return a[0]
 *     def get_whole_allowedQuanta(self):
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_rquanta_id); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":328
 *         return qmap[0]
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,             # <<<<<<<<<<<<<<
 *                                                  rquanta_id)
 *         return a[0]
 */
  __pyx_v_a = x_StateInfo_allowedQuanta(__pyx_v_self->_this, __pyx_t_1, __pyx_t_2);

  /* "_dmrg.pyx":330
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,
 *                                                  rquanta_id)
 *         return a[0]             # <<<<<<<<<<<<<<
 *     def get_whole_allowedQuanta(self):
 *         nrow = self._this.leftStateInfo.quanta.size()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_char((__pyx_v_a[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":327
 *                                                        rquanta_id)
 *         return qmap[0]
 *     def get_allowedQuanta(self, lquanta_id, rquanta_id):             # <<<<<<<<<<<<<<
 *         cdef char *a = x_StateInfo_allowedQuanta(self._this, lquanta_id,
 *                                                  rquanta_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_allowedQuanta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":331
 *                                                  rquanta_id)
 *         return a[0]
 *     def get_whole_allowedQuanta(self):             # <<<<<<<<<<<<<<
 *         nrow = self._this.leftStateInfo.quanta.size()
 *         ncol = self._this.leftStateInfo.quanta.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_7get_whole_allowedQuanta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_7get_whole_allowedQuanta(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_whole_allowedQuanta (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_6get_whole_allowedQuanta(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_6get_whole_allowedQuanta(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  size_t __pyx_v_nrow;
  size_t __pyx_v_ncol;
  PyArrayObject *__pyx_v_tftab = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_whole_allowedQuanta", 0);

  /* "_dmrg.pyx":332
 *         return a[0]
 *     def get_whole_allowedQuanta(self):
 *         nrow = self._this.leftStateInfo.quanta.size()             # <<<<<<<<<<<<<<
 *         ncol = self._this.leftStateInfo.quanta.size()
 *         cdef numpy.ndarray tftab = numpy.zeros((nrow,ncol),dtype=numpy.bool8)
 */
  __pyx_v_nrow = __pyx_v_self->_this->leftStateInfo->quanta.size();

  /* "_dmrg.pyx":333
 *     def get_whole_allowedQuanta(self):
 *         nrow = self._this.leftStateInfo.quanta.size()
 *         ncol = self._this.leftStateInfo.quanta.size()             # <<<<<<<<<<<<<<
 *         cdef numpy.ndarray tftab = numpy.zeros((nrow,ncol),dtype=numpy.bool8)
 *         get_whole_StateInfo_allowedQuanta(self._this, <char *>tftab.data)
 */
  __pyx_v_ncol = __pyx_v_self->_this->leftStateInfo->quanta.size();

  /* "_dmrg.pyx":334
 *         nrow = self._this.leftStateInfo.quanta.size()
 *         ncol = self._this.leftStateInfo.quanta.size()
 *         cdef numpy.ndarray tftab = numpy.zeros((nrow,ncol),dtype=numpy.bool8)             # <<<<<<<<<<<<<<
 *         get_whole_StateInfo_allowedQuanta(self._this, <char *>tftab.data)
 *         return tftab
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nrow); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_ncol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_bool8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_tftab = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "_dmrg.pyx":335
 *         ncol = self._this.leftStateInfo.quanta.size()
 *         cdef numpy.ndarray tftab = numpy.zeros((nrow,ncol),dtype=numpy.bool8)
 *         get_whole_StateInfo_allowedQuanta(self._this, <char *>tftab.data)             # <<<<<<<<<<<<<<
 *         return tftab
 *     property leftUnMapQuanta:
 */
  get_whole_StateInfo_allowedQuanta(__pyx_v_self->_this, ((char *)__pyx_v_tftab->data));

  /* "_dmrg.pyx":336
 *         cdef numpy.ndarray tftab = numpy.zeros((nrow,ncol),dtype=numpy.bool8)
 *         get_whole_StateInfo_allowedQuanta(self._this, <char *>tftab.data)
 *         return tftab             # <<<<<<<<<<<<<<
 *     property leftUnMapQuanta:
 *         def __get__(self): return self._this.leftUnMapQuanta
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_tftab));
  __pyx_r = ((PyObject *)__pyx_v_tftab);
  goto __pyx_L0;

  /* "_dmrg.pyx":331
 *                                                  rquanta_id)
 *         return a[0]
 *     def get_whole_allowedQuanta(self):             # <<<<<<<<<<<<<<
 *         nrow = self._this.leftStateInfo.quanta.size()
 *         ncol = self._this.leftStateInfo.quanta.size()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.get_whole_allowedQuanta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tftab);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":338
 *         return tftab
 *     property leftUnMapQuanta:
 *         def __get__(self): return self._this.leftUnMapQuanta             # <<<<<<<<<<<<<<
 *     property rightUnMapQuanta:
 *         def __get__(self): return self._this.rightUnMapQuanta
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_15leftUnMapQuanta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_15leftUnMapQuanta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_15leftUnMapQuanta___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_15leftUnMapQuanta___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->leftUnMapQuanta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.leftUnMapQuanta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":340
 *         def __get__(self): return self._this.leftUnMapQuanta
 *     property rightUnMapQuanta:
 *         def __get__(self): return self._this.rightUnMapQuanta             # <<<<<<<<<<<<<<
 *     property leftStateInfo:
 *         def __get__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_16rightUnMapQuanta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_16rightUnMapQuanta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_16rightUnMapQuanta___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_16rightUnMapQuanta___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->rightUnMapQuanta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.rightUnMapQuanta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":342
 *         def __get__(self): return self._this.rightUnMapQuanta
 *     property leftStateInfo:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             s = RawStateInfo()
 *             s._this = self._this.leftStateInfo
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_13leftStateInfo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_13leftStateInfo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_13leftStateInfo___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_13leftStateInfo___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  SpinAdapted::StateInfo *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_dmrg.pyx":343
 *     property leftStateInfo:
 *         def __get__(self):
 *             s = RawStateInfo()             # <<<<<<<<<<<<<<
 *             s._this = self._this.leftStateInfo
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":344
 *         def __get__(self):
 *             s = RawStateInfo()
 *             s._this = self._this.leftStateInfo             # <<<<<<<<<<<<<<
 *             return s
 *     property rightStateInfo:
 */
  __pyx_t_2 = __pyx_v_self->_this->leftStateInfo;
  __pyx_v_s->_this = __pyx_t_2;

  /* "_dmrg.pyx":345
 *             s = RawStateInfo()
 *             s._this = self._this.leftStateInfo
 *             return s             # <<<<<<<<<<<<<<
 *     property rightStateInfo:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "_dmrg.pyx":342
 *         def __get__(self): return self._this.rightUnMapQuanta
 *     property leftStateInfo:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             s = RawStateInfo()
 *             s._this = self._this.leftStateInfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.leftStateInfo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":347
 *             return s
 *     property rightStateInfo:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             s = RawStateInfo()
 *             s._this = self._this.rightStateInfo
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_14rightStateInfo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_14rightStateInfo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_14rightStateInfo___get__(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_14rightStateInfo___get__(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  SpinAdapted::StateInfo *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "_dmrg.pyx":348
 *     property rightStateInfo:
 *         def __get__(self):
 *             s = RawStateInfo()             # <<<<<<<<<<<<<<
 *             s._this = self._this.rightStateInfo
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":349
 *         def __get__(self):
 *             s = RawStateInfo()
 *             s._this = self._this.rightStateInfo             # <<<<<<<<<<<<<<
 *             return s
 *     def save(self, filesi):
 */
  __pyx_t_2 = __pyx_v_self->_this->rightStateInfo;
  __pyx_v_s->_this = __pyx_t_2;

  /* "_dmrg.pyx":350
 *             s = RawStateInfo()
 *             s._this = self._this.rightStateInfo
 *             return s             # <<<<<<<<<<<<<<
 *     def save(self, filesi):
 *         save_stateinfo(filesi, self._this)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "_dmrg.pyx":347
 *             return s
 *     property rightStateInfo:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             s = RawStateInfo()
 *             s._this = self._this.rightStateInfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawStateInfo.rightStateInfo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":351
 *             s._this = self._this.rightStateInfo
 *             return s
 *     def save(self, filesi):             # <<<<<<<<<<<<<<
 *         save_stateinfo(filesi, self._this)
 *     def load(self, filesi):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_9save(PyObject *__pyx_v_self, PyObject *__pyx_v_filesi); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_9save(PyObject *__pyx_v_self, PyObject *__pyx_v_filesi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_8save(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self), ((PyObject *)__pyx_v_filesi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_8save(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_filesi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "_dmrg.pyx":352
 *             return s
 *     def save(self, filesi):
 *         save_stateinfo(filesi, self._this)             # <<<<<<<<<<<<<<
 *     def load(self, filesi):
 *         load_stateinfo(filesi, self._this)
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filesi); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  save_stateinfo(__pyx_t_1, __pyx_v_self->_this);

  /* "_dmrg.pyx":351
 *             s._this = self._this.rightStateInfo
 *             return s
 *     def save(self, filesi):             # <<<<<<<<<<<<<<
 *         save_stateinfo(filesi, self._this)
 *     def load(self, filesi):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.RawStateInfo.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":353
 *     def save(self, filesi):
 *         save_stateinfo(filesi, self._this)
 *     def load(self, filesi):             # <<<<<<<<<<<<<<
 *         load_stateinfo(filesi, self._this)
 * cdef class NewRawStateInfo(RawStateInfo):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_11load(PyObject *__pyx_v_self, PyObject *__pyx_v_filesi); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawStateInfo_11load(PyObject *__pyx_v_self, PyObject *__pyx_v_filesi) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawStateInfo_10load(((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_self), ((PyObject *)__pyx_v_filesi));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawStateInfo_10load(struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_self, PyObject *__pyx_v_filesi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "_dmrg.pyx":354
 *         save_stateinfo(filesi, self._this)
 *     def load(self, filesi):
 *         load_stateinfo(filesi, self._this)             # <<<<<<<<<<<<<<
 * cdef class NewRawStateInfo(RawStateInfo):
 *     def __cinit__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filesi); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  load_stateinfo(__pyx_t_1, __pyx_v_self->_this);

  /* "_dmrg.pyx":353
 *     def save(self, filesi):
 *         save_stateinfo(filesi, self._this)
 *     def load(self, filesi):             # <<<<<<<<<<<<<<
 *         load_stateinfo(filesi, self._this)
 * cdef class NewRawStateInfo(RawStateInfo):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.RawStateInfo.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":356
 *         load_stateinfo(filesi, self._this)
 * cdef class NewRawStateInfo(RawStateInfo):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new StateInfo()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5_dmrg_15NewRawStateInfo_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5_dmrg_15NewRawStateInfo_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5_dmrg_15NewRawStateInfo___cinit__(((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5_dmrg_15NewRawStateInfo___cinit__(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_dmrg.pyx":357
 * cdef class NewRawStateInfo(RawStateInfo):
 *     def __cinit__(self):
 *         self._this = new StateInfo()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._this
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::StateInfo();

  /* "_dmrg.pyx":356
 *         load_stateinfo(filesi, self._this)
 * cdef class NewRawStateInfo(RawStateInfo):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new StateInfo()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":358
 *     def __cinit__(self):
 *         self._this = new StateInfo()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):
 */

/* Python wrapper */
static void __pyx_pw_5_dmrg_15NewRawStateInfo_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5_dmrg_15NewRawStateInfo_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5_dmrg_15NewRawStateInfo_2__dealloc__(((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5_dmrg_15NewRawStateInfo_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_dmrg.pyx":359
 *         self._this = new StateInfo()
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):
 *         del self._this
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":358
 *     def __cinit__(self):
 *         self._this = new StateInfo()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_dmrg.pyx":360
 *     def __dealloc__(self):
 *         del self._this
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):             # <<<<<<<<<<<<<<
 *         del self._this
 *         cdef int quantaStates = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawStateInfo_5init_by_a_spinquantum(PyObject *__pyx_v_self, PyObject *__pyx_v_sq); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawStateInfo_5init_by_a_spinquantum(PyObject *__pyx_v_self, PyObject *__pyx_v_sq) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_by_a_spinquantum (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sq), __pyx_ptype_5_dmrg_RawSpinQuantum, 1, "sq", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawStateInfo_4init_by_a_spinquantum(((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_v_self), ((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_v_sq));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawStateInfo_4init_by_a_spinquantum(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self, struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_sq) {
  int __pyx_v_quantaStates;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_by_a_spinquantum", 0);

  /* "_dmrg.pyx":361
 *         del self._this
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):
 *         del self._this             # <<<<<<<<<<<<<<
 *         cdef int quantaStates = 1
 *         self._this = new StateInfo(1, sq._this, &quantaStates)
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":362
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):
 *         del self._this
 *         cdef int quantaStates = 1             # <<<<<<<<<<<<<<
 *         self._this = new StateInfo(1, sq._this, &quantaStates)
 *     def set_unCollectedStateInfo(self, RawStateInfo old):
 */
  __pyx_v_quantaStates = 1;

  /* "_dmrg.pyx":363
 *         del self._this
 *         cdef int quantaStates = 1
 *         self._this = new StateInfo(1, sq._this, &quantaStates)             # <<<<<<<<<<<<<<
 *     def set_unCollectedStateInfo(self, RawStateInfo old):
 *         self._this.initialised = True
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::StateInfo(1, __pyx_v_sq->_this, (&__pyx_v_quantaStates));

  /* "_dmrg.pyx":360
 *     def __dealloc__(self):
 *         del self._this
 *     def init_by_a_spinquantum(self, RawSpinQuantum sq):             # <<<<<<<<<<<<<<
 *         del self._this
 *         cdef int quantaStates = 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":364
 *         cdef int quantaStates = 1
 *         self._this = new StateInfo(1, sq._this, &quantaStates)
 *     def set_unCollectedStateInfo(self, RawStateInfo old):             # <<<<<<<<<<<<<<
 *         self._this.initialised = True
 *         self._this.AllocateUnCollectedStateInfo()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawStateInfo_7set_unCollectedStateInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_old); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawStateInfo_7set_unCollectedStateInfo(PyObject *__pyx_v_self, PyObject *__pyx_v_old) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_unCollectedStateInfo (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_old), __pyx_ptype_5_dmrg_RawStateInfo, 1, "old", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawStateInfo_6set_unCollectedStateInfo(((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_v_self), ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_old));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawStateInfo_6set_unCollectedStateInfo(struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_old) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  SpinAdapted::StateInfo *__pyx_t_1;
  std::vector<int> __pyx_t_2;
  __Pyx_RefNannySetupContext("set_unCollectedStateInfo", 0);

  /* "_dmrg.pyx":365
 *         self._this = new StateInfo(1, sq._this, &quantaStates)
 *     def set_unCollectedStateInfo(self, RawStateInfo old):
 *         self._this.initialised = True             # <<<<<<<<<<<<<<
 *         self._this.AllocateUnCollectedStateInfo()
 *         self._this.leftStateInfo    = old._this.leftStateInfo
 */
  __pyx_v_self->__pyx_base._this->initialised = 1;

  /* "_dmrg.pyx":366
 *     def set_unCollectedStateInfo(self, RawStateInfo old):
 *         self._this.initialised = True
 *         self._this.AllocateUnCollectedStateInfo()             # <<<<<<<<<<<<<<
 *         self._this.leftStateInfo    = old._this.leftStateInfo
 *         self._this.rightStateInfo   = old._this.rightStateInfo
 */
  __pyx_v_self->__pyx_base._this->AllocateUnCollectedStateInfo();

  /* "_dmrg.pyx":367
 *         self._this.initialised = True
 *         self._this.AllocateUnCollectedStateInfo()
 *         self._this.leftStateInfo    = old._this.leftStateInfo             # <<<<<<<<<<<<<<
 *         self._this.rightStateInfo   = old._this.rightStateInfo
 *         self._this.leftUnMapQuanta  = old._this.leftUnMapQuanta
 */
  __pyx_t_1 = __pyx_v_old->_this->leftStateInfo;
  __pyx_v_self->__pyx_base._this->leftStateInfo = __pyx_t_1;

  /* "_dmrg.pyx":368
 *         self._this.AllocateUnCollectedStateInfo()
 *         self._this.leftStateInfo    = old._this.leftStateInfo
 *         self._this.rightStateInfo   = old._this.rightStateInfo             # <<<<<<<<<<<<<<
 *         self._this.leftUnMapQuanta  = old._this.leftUnMapQuanta
 *         self._this.rightUnMapQuanta = old._this.rightUnMapQuanta
 */
  __pyx_t_1 = __pyx_v_old->_this->rightStateInfo;
  __pyx_v_self->__pyx_base._this->rightStateInfo = __pyx_t_1;

  /* "_dmrg.pyx":369
 *         self._this.leftStateInfo    = old._this.leftStateInfo
 *         self._this.rightStateInfo   = old._this.rightStateInfo
 *         self._this.leftUnMapQuanta  = old._this.leftUnMapQuanta             # <<<<<<<<<<<<<<
 *         self._this.rightUnMapQuanta = old._this.rightUnMapQuanta
 *         assign_deref_shared_ptr(self._this.unCollectedStateInfo, old._this[0])
 */
  __pyx_t_2 = __pyx_v_old->_this->leftUnMapQuanta;
  __pyx_v_self->__pyx_base._this->leftUnMapQuanta = __pyx_t_2;

  /* "_dmrg.pyx":370
 *         self._this.rightStateInfo   = old._this.rightStateInfo
 *         self._this.leftUnMapQuanta  = old._this.leftUnMapQuanta
 *         self._this.rightUnMapQuanta = old._this.rightUnMapQuanta             # <<<<<<<<<<<<<<
 *         assign_deref_shared_ptr(self._this.unCollectedStateInfo, old._this[0])
 * 
 */
  __pyx_t_2 = __pyx_v_old->_this->rightUnMapQuanta;
  __pyx_v_self->__pyx_base._this->rightUnMapQuanta = __pyx_t_2;

  /* "_dmrg.pyx":371
 *         self._this.leftUnMapQuanta  = old._this.leftUnMapQuanta
 *         self._this.rightUnMapQuanta = old._this.rightUnMapQuanta
 *         assign_deref_shared_ptr(self._this.unCollectedStateInfo, old._this[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  assign_deref_shared_ptr<SpinAdapted::StateInfo>(__pyx_v_self->__pyx_base._this->unCollectedStateInfo, (__pyx_v_old->_this[0]));

  /* "_dmrg.pyx":364
 *         cdef int quantaStates = 1
 *         self._this = new StateInfo(1, sq._this, &quantaStates)
 *     def set_unCollectedStateInfo(self, RawStateInfo old):             # <<<<<<<<<<<<<<
 *         self._this.initialised = True
 *         self._this.AllocateUnCollectedStateInfo()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":376
 * cdef class RawSpinBlock:
 *     cdef SpinBlock *_this
 *     def get_braStateInfo(self):             # <<<<<<<<<<<<<<
 *         si = RawStateInfo()
 *         #si._this = x_SpinBlock_stateInfo(self._this)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_1get_braStateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_1get_braStateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_braStateInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_get_braStateInfo(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_get_braStateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_braStateInfo", 0);

  /* "_dmrg.pyx":377
 *     cdef SpinBlock *_this
 *     def get_braStateInfo(self):
 *         si = RawStateInfo()             # <<<<<<<<<<<<<<
 *         #si._this = x_SpinBlock_stateInfo(self._this)
 *         si._this = &self._this.braStateInfo
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_si = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":379
 *         si = RawStateInfo()
 *         #si._this = x_SpinBlock_stateInfo(self._this)
 *         si._this = &self._this.braStateInfo             # <<<<<<<<<<<<<<
 *         return si
 *     def get_ketStateInfo(self):
 */
  __pyx_v_si->_this = (&__pyx_v_self->_this->braStateInfo);

  /* "_dmrg.pyx":380
 *         #si._this = x_SpinBlock_stateInfo(self._this)
 *         si._this = &self._this.braStateInfo
 *         return si             # <<<<<<<<<<<<<<
 *     def get_ketStateInfo(self):
 *         si = RawStateInfo()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_si));
  __pyx_r = ((PyObject *)__pyx_v_si);
  goto __pyx_L0;

  /* "_dmrg.pyx":376
 * cdef class RawSpinBlock:
 *     cdef SpinBlock *_this
 *     def get_braStateInfo(self):             # <<<<<<<<<<<<<<
 *         si = RawStateInfo()
 *         #si._this = x_SpinBlock_stateInfo(self._this)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinBlock.get_braStateInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_si);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":381
 *         si._this = &self._this.braStateInfo
 *         return si
 *     def get_ketStateInfo(self):             # <<<<<<<<<<<<<<
 *         si = RawStateInfo()
 *         si._this = &self._this.ketStateInfo
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_3get_ketStateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_3get_ketStateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ketStateInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_2get_ketStateInfo(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_2get_ketStateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ketStateInfo", 0);

  /* "_dmrg.pyx":382
 *         return si
 *     def get_ketStateInfo(self):
 *         si = RawStateInfo()             # <<<<<<<<<<<<<<
 *         si._this = &self._this.ketStateInfo
 *         return si
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_si = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":383
 *     def get_ketStateInfo(self):
 *         si = RawStateInfo()
 *         si._this = &self._this.ketStateInfo             # <<<<<<<<<<<<<<
 *         return si
 *     def get_stateInfo(self):
 */
  __pyx_v_si->_this = (&__pyx_v_self->_this->ketStateInfo);

  /* "_dmrg.pyx":384
 *         si = RawStateInfo()
 *         si._this = &self._this.ketStateInfo
 *         return si             # <<<<<<<<<<<<<<
 *     def get_stateInfo(self):
 *         return self.get_braStateInfo()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_si));
  __pyx_r = ((PyObject *)__pyx_v_si);
  goto __pyx_L0;

  /* "_dmrg.pyx":381
 *         si._this = &self._this.braStateInfo
 *         return si
 *     def get_ketStateInfo(self):             # <<<<<<<<<<<<<<
 *         si = RawStateInfo()
 *         si._this = &self._this.ketStateInfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinBlock.get_ketStateInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_si);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":385
 *         si._this = &self._this.ketStateInfo
 *         return si
 *     def get_stateInfo(self):             # <<<<<<<<<<<<<<
 *         return self.get_braStateInfo()
 *     #def get_sites(self): return self._this.get_sites()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_5get_stateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_5get_stateInfo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stateInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_4get_stateInfo(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_4get_stateInfo(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_stateInfo", 0);

  /* "_dmrg.pyx":386
 *         return si
 *     def get_stateInfo(self):
 *         return self.get_braStateInfo()             # <<<<<<<<<<<<<<
 *     #def get_sites(self): return self._this.get_sites()
 *     property sites:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_braStateInfo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":385
 *         si._this = &self._this.ketStateInfo
 *         return si
 *     def get_stateInfo(self):             # <<<<<<<<<<<<<<
 *         return self.get_braStateInfo()
 *     #def get_sites(self): return self._this.get_sites()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_dmrg.RawSpinBlock.get_stateInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":389
 *     #def get_sites(self): return self._this.get_sites()
 *     property sites:
 *         def __get__(self): return self._this.sites             # <<<<<<<<<<<<<<
 *     def printOperatorSummary(self):
 *         self._this.printOperatorSummary()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_5sites_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_5sites_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_5sites___get__(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_5sites___get__(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->sites); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSpinBlock.sites.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":390
 *     property sites:
 *         def __get__(self): return self._this.sites
 *     def printOperatorSummary(self):             # <<<<<<<<<<<<<<
 *         self._this.printOperatorSummary()
 *     def save(self, filespinblock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_7printOperatorSummary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_7printOperatorSummary(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printOperatorSummary (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_6printOperatorSummary(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_6printOperatorSummary(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printOperatorSummary", 0);

  /* "_dmrg.pyx":391
 *         def __get__(self): return self._this.sites
 *     def printOperatorSummary(self):
 *         self._this.printOperatorSummary()             # <<<<<<<<<<<<<<
 *     def save(self, filespinblock):
 *         save_spinblock(filespinblock, self._this)
 */
  __pyx_v_self->_this->printOperatorSummary();

  /* "_dmrg.pyx":390
 *     property sites:
 *         def __get__(self): return self._this.sites
 *     def printOperatorSummary(self):             # <<<<<<<<<<<<<<
 *         self._this.printOperatorSummary()
 *     def save(self, filespinblock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":392
 *     def printOperatorSummary(self):
 *         self._this.printOperatorSummary()
 *     def save(self, filespinblock):             # <<<<<<<<<<<<<<
 *         save_spinblock(filespinblock, self._this)
 * cdef class NewRawSpinBlock(RawSpinBlock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_9save(PyObject *__pyx_v_self, PyObject *__pyx_v_filespinblock); /*proto*/
static PyObject *__pyx_pw_5_dmrg_12RawSpinBlock_9save(PyObject *__pyx_v_self, PyObject *__pyx_v_filespinblock) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_12RawSpinBlock_8save(((struct __pyx_obj_5_dmrg_RawSpinBlock *)__pyx_v_self), ((PyObject *)__pyx_v_filespinblock));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12RawSpinBlock_8save(struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_self, PyObject *__pyx_v_filespinblock) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "_dmrg.pyx":393
 *         self._this.printOperatorSummary()
 *     def save(self, filespinblock):
 *         save_spinblock(filespinblock, self._this)             # <<<<<<<<<<<<<<
 * cdef class NewRawSpinBlock(RawSpinBlock):
 *     def __cinit__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filespinblock); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  save_spinblock(__pyx_t_1, __pyx_v_self->_this);

  /* "_dmrg.pyx":392
 *     def printOperatorSummary(self):
 *         self._this.printOperatorSummary()
 *     def save(self, filespinblock):             # <<<<<<<<<<<<<<
 *         save_spinblock(filespinblock, self._this)
 * cdef class NewRawSpinBlock(RawSpinBlock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.RawSpinBlock.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":395
 *         save_spinblock(filespinblock, self._this)
 * cdef class NewRawSpinBlock(RawSpinBlock):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new SpinBlock()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5_dmrg_15NewRawSpinBlock_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5_dmrg_15NewRawSpinBlock_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock___cinit__(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5_dmrg_15NewRawSpinBlock___cinit__(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_dmrg.pyx":396
 * cdef class NewRawSpinBlock(RawSpinBlock):
 *     def __cinit__(self):
 *         self._this = new SpinBlock()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._this
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::SpinBlock();

  /* "_dmrg.pyx":395
 *         save_spinblock(filespinblock, self._this)
 * cdef class NewRawSpinBlock(RawSpinBlock):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new SpinBlock()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":397
 *     def __cinit__(self):
 *         self._this = new SpinBlock()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def load(self, filespinblock):
 */

/* Python wrapper */
static void __pyx_pw_5_dmrg_15NewRawSpinBlock_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5_dmrg_15NewRawSpinBlock_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5_dmrg_15NewRawSpinBlock_2__dealloc__(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5_dmrg_15NewRawSpinBlock_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_dmrg.pyx":398
 *         self._this = new SpinBlock()
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 *     def load(self, filespinblock):
 *         bra = RawStateInfo()
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":397
 *     def __cinit__(self):
 *         self._this = new SpinBlock()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def load(self, filespinblock):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_dmrg.pyx":399
 *     def __dealloc__(self):
 *         del self._this
 *     def load(self, filespinblock):             # <<<<<<<<<<<<<<
 *         bra = RawStateInfo()
 *         bra._this = &self._this.braStateInfo
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filespinblock); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filespinblock) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_4load(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((PyObject *)__pyx_v_filespinblock));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_4load(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_filespinblock) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_bra = NULL;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_ket = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "_dmrg.pyx":400
 *         del self._this
 *     def load(self, filespinblock):
 *         bra = RawStateInfo()             # <<<<<<<<<<<<<<
 *         bra._this = &self._this.braStateInfo
 *         ket = RawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bra = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":401
 *     def load(self, filespinblock):
 *         bra = RawStateInfo()
 *         bra._this = &self._this.braStateInfo             # <<<<<<<<<<<<<<
 *         ket = RawStateInfo()
 *         ket._this = &self._this.ketStateInfo
 */
  __pyx_v_bra->_this = (&__pyx_v_self->__pyx_base._this->braStateInfo);

  /* "_dmrg.pyx":402
 *         bra = RawStateInfo()
 *         bra._this = &self._this.braStateInfo
 *         ket = RawStateInfo()             # <<<<<<<<<<<<<<
 *         ket._this = &self._this.ketStateInfo
 *         load_spinblock(filespinblock, self._this)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ket = ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":403
 *         bra._this = &self._this.braStateInfo
 *         ket = RawStateInfo()
 *         ket._this = &self._this.ketStateInfo             # <<<<<<<<<<<<<<
 *         load_spinblock(filespinblock, self._this)
 *         return bra, ket
 */
  __pyx_v_ket->_this = (&__pyx_v_self->__pyx_base._this->ketStateInfo);

  /* "_dmrg.pyx":404
 *         ket = RawStateInfo()
 *         ket._this = &self._this.ketStateInfo
 *         load_spinblock(filespinblock, self._this)             # <<<<<<<<<<<<<<
 *         return bra, ket
 *     def init_by_dot_id(self, int start, int finish, implicitTranspose, is_complement=0):
 */
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_filespinblock); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  load_spinblock(__pyx_t_2, __pyx_v_self->__pyx_base._this);

  /* "_dmrg.pyx":405
 *         ket._this = &self._this.ketStateInfo
 *         load_spinblock(filespinblock, self._this)
 *         return bra, ket             # <<<<<<<<<<<<<<
 *     def init_by_dot_id(self, int start, int finish, implicitTranspose, is_complement=0):
 *         del self._this
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_bra));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_bra));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_bra));
  __Pyx_INCREF(((PyObject *)__pyx_v_ket));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_ket));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_ket));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":399
 *     def __dealloc__(self):
 *         del self._this
 *     def load(self, filespinblock):             # <<<<<<<<<<<<<<
 *         bra = RawStateInfo()
 *         bra._this = &self._this.braStateInfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bra);
  __Pyx_XDECREF((PyObject *)__pyx_v_ket);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":406
 *         load_spinblock(filespinblock, self._this)
 *         return bra, ket
 *     def init_by_dot_id(self, int start, int finish, implicitTranspose, is_complement=0):             # <<<<<<<<<<<<<<
 *         del self._this
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_7init_by_dot_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_7init_by_dot_id(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_start;
  int __pyx_v_finish;
  PyObject *__pyx_v_implicitTranspose = 0;
  PyObject *__pyx_v_is_complement = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_by_dot_id (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_finish,&__pyx_n_s_implicitTranspose,&__pyx_n_s_is_complement,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_finish)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_by_dot_id", 0, 3, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_implicitTranspose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("init_by_dot_id", 0, 3, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_is_complement);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_by_dot_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_finish = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_finish == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_implicitTranspose = values[2];
    __pyx_v_is_complement = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_by_dot_id", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.init_by_dot_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_6init_by_dot_id(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), __pyx_v_start, __pyx_v_finish, __pyx_v_implicitTranspose, __pyx_v_is_complement);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_6init_by_dot_id(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, int __pyx_v_start, int __pyx_v_finish, PyObject *__pyx_v_implicitTranspose, PyObject *__pyx_v_is_complement) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_by_dot_id", 0);

  /* "_dmrg.pyx":407
 *         return bra, ket
 *     def init_by_dot_id(self, int start, int finish, implicitTranspose, is_complement=0):
 *         del self._this             # <<<<<<<<<<<<<<
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 *         self._this = new SpinBlock(start, finish, implicitTranspose, is_complement)
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":409
 *         del self._this
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 *         self._this = new SpinBlock(start, finish, implicitTranspose, is_complement)             # <<<<<<<<<<<<<<
 *     def init_by_stateinfo(self, RawStateInfo si):
 *         del self._this
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_implicitTranspose); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_is_complement); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base._this = new SpinAdapted::SpinBlock(__pyx_v_start, __pyx_v_finish, __pyx_t_1, __pyx_t_2);

  /* "_dmrg.pyx":406
 *         load_spinblock(filespinblock, self._this)
 *         return bra, ket
 *     def init_by_dot_id(self, int start, int finish, implicitTranspose, is_complement=0):             # <<<<<<<<<<<<<<
 *         del self._this
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.init_by_dot_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":410
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 *         self._this = new SpinBlock(start, finish, implicitTranspose, is_complement)
 *     def init_by_stateinfo(self, RawStateInfo si):             # <<<<<<<<<<<<<<
 *         del self._this
 *         self._this = new SpinBlock(si._this[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_9init_by_stateinfo(PyObject *__pyx_v_self, PyObject *__pyx_v_si); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_9init_by_stateinfo(PyObject *__pyx_v_self, PyObject *__pyx_v_si) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_by_stateinfo (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_si), __pyx_ptype_5_dmrg_RawStateInfo, 1, "si", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_8init_by_stateinfo(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((struct __pyx_obj_5_dmrg_RawStateInfo *)__pyx_v_si));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_8init_by_stateinfo(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_by_stateinfo", 0);

  /* "_dmrg.pyx":411
 *         self._this = new SpinBlock(start, finish, implicitTranspose, is_complement)
 *     def init_by_stateinfo(self, RawStateInfo si):
 *         del self._this             # <<<<<<<<<<<<<<
 *         self._this = new SpinBlock(si._this[0])
 *     def BuildTensorProductBlock(self, sites):
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":412
 *     def init_by_stateinfo(self, RawStateInfo si):
 *         del self._this
 *         self._this = new SpinBlock(si._this[0])             # <<<<<<<<<<<<<<
 *     def BuildTensorProductBlock(self, sites):
 *         self._this.BuildTensorProductBlock(sites)
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::SpinBlock((__pyx_v_si->_this[0]));

  /* "_dmrg.pyx":410
 *         # FIXME: SpinBlock(start,finish) calls dmrginp
 *         self._this = new SpinBlock(start, finish, implicitTranspose, is_complement)
 *     def init_by_stateinfo(self, RawStateInfo si):             # <<<<<<<<<<<<<<
 *         del self._this
 *         self._this = new SpinBlock(si._this[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":413
 *         del self._this
 *         self._this = new SpinBlock(si._this[0])
 *     def BuildTensorProductBlock(self, sites):             # <<<<<<<<<<<<<<
 *         self._this.BuildTensorProductBlock(sites)
 *     def default_op_components(self, direct,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_11BuildTensorProductBlock(PyObject *__pyx_v_self, PyObject *__pyx_v_sites); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_11BuildTensorProductBlock(PyObject *__pyx_v_self, PyObject *__pyx_v_sites) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BuildTensorProductBlock (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_10BuildTensorProductBlock(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((PyObject *)__pyx_v_sites));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_10BuildTensorProductBlock(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_sites) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int> __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("BuildTensorProductBlock", 0);

  /* "_dmrg.pyx":414
 *         self._this = new SpinBlock(si._this[0])
 *     def BuildTensorProductBlock(self, sites):
 *         self._this.BuildTensorProductBlock(sites)             # <<<<<<<<<<<<<<
 *     def default_op_components(self, direct,
 *                               RawSpinBlock lBlock, RawSpinBlock rBlock,
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_sites); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base._this->BuildTensorProductBlock(__pyx_t_1);

  /* "_dmrg.pyx":413
 *         del self._this
 *         self._this = new SpinBlock(si._this[0])
 *     def BuildTensorProductBlock(self, sites):             # <<<<<<<<<<<<<<
 *         self._this.BuildTensorProductBlock(sites)
 *     def default_op_components(self, direct,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.BuildTensorProductBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":415
 *     def BuildTensorProductBlock(self, sites):
 *         self._this.BuildTensorProductBlock(sites)
 *     def default_op_components(self, direct,             # <<<<<<<<<<<<<<
 *                               RawSpinBlock lBlock, RawSpinBlock rBlock,
 *                               haveNormops, haveCompops,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_13default_op_components(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_13default_op_components(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_direct = 0;
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lBlock = 0;
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rBlock = 0;
  PyObject *__pyx_v_haveNormops = 0;
  PyObject *__pyx_v_haveCompops = 0;
  PyObject *__pyx_v_implicitTranspose = 0;
  PyObject *__pyx_v_storagetype = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_op_components (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_direct,&__pyx_n_s_lBlock,&__pyx_n_s_rBlock,&__pyx_n_s_haveNormops,&__pyx_n_s_haveCompops,&__pyx_n_s_implicitTranspose,&__pyx_n_s_storagetype,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_direct)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lBlock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rBlock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_haveNormops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_haveCompops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_implicitTranspose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_storagetype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "default_op_components") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_direct = values[0];
    __pyx_v_lBlock = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[1]);
    __pyx_v_rBlock = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[2]);
    __pyx_v_haveNormops = values[3];
    __pyx_v_haveCompops = values[4];
    __pyx_v_implicitTranspose = values[5];
    __pyx_v_storagetype = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("default_op_components", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.default_op_components", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lBlock), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "lBlock", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rBlock), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "rBlock", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_12default_op_components(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), __pyx_v_direct, __pyx_v_lBlock, __pyx_v_rBlock, __pyx_v_haveNormops, __pyx_v_haveCompops, __pyx_v_implicitTranspose, __pyx_v_storagetype);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_12default_op_components(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_direct, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lBlock, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rBlock, PyObject *__pyx_v_haveNormops, PyObject *__pyx_v_haveCompops, PyObject *__pyx_v_implicitTranspose, PyObject *__pyx_v_storagetype) {
  enum SpinAdapted::Storagetype __pyx_v_t;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  bool __pyx_t_2;
  bool __pyx_t_3;
  bool __pyx_t_4;
  enum SpinAdapted::Storagetype __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("default_op_components", 0);

  /* "_dmrg.pyx":420
 *                               implicitTranspose, storagetype):
 *         # storage type can be one of 0 = LOCAL_STORAGE, 1 = DISTRIBUTED_STORAGE
 *         self._this.default_op_components(direct,             # <<<<<<<<<<<<<<
 *                                          lBlock._this[0], rBlock._this[0],
 *                                          haveNormops, haveCompops,
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_direct); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":422
 *         self._this.default_op_components(direct,
 *                                          lBlock._this[0], rBlock._this[0],
 *                                          haveNormops, haveCompops,             # <<<<<<<<<<<<<<
 *                                          implicitTranspose)
 *         cdef Storagetype t = storagetype
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_haveNormops); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_haveCompops); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":423
 *                                          lBlock._this[0], rBlock._this[0],
 *                                          haveNormops, haveCompops,
 *                                          implicitTranspose)             # <<<<<<<<<<<<<<
 *         cdef Storagetype t = storagetype
 *         self._this.setstoragetype(t)
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_implicitTranspose); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":420
 *                               implicitTranspose, storagetype):
 *         # storage type can be one of 0 = LOCAL_STORAGE, 1 = DISTRIBUTED_STORAGE
 *         self._this.default_op_components(direct,             # <<<<<<<<<<<<<<
 *                                          lBlock._this[0], rBlock._this[0],
 *                                          haveNormops, haveCompops,
 */
  __pyx_v_self->__pyx_base._this->default_op_components(__pyx_t_1, (__pyx_v_lBlock->_this[0]), (__pyx_v_rBlock->_this[0]), __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "_dmrg.pyx":424
 *                                          haveNormops, haveCompops,
 *                                          implicitTranspose)
 *         cdef Storagetype t = storagetype             # <<<<<<<<<<<<<<
 *         self._this.setstoragetype(t)
 *     def default_op_components_compl(self, complementary, implicitTranspose):
 */
  __pyx_t_5 = ((enum SpinAdapted::Storagetype)PyInt_AsLong(__pyx_v_storagetype)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_t = __pyx_t_5;

  /* "_dmrg.pyx":425
 *                                          implicitTranspose)
 *         cdef Storagetype t = storagetype
 *         self._this.setstoragetype(t)             # <<<<<<<<<<<<<<
 *     def default_op_components_compl(self, complementary, implicitTranspose):
 *         self._this.default_op_components(complementary, implicitTranspose)
 */
  __pyx_v_self->__pyx_base._this->setstoragetype(__pyx_v_t);

  /* "_dmrg.pyx":415
 *     def BuildTensorProductBlock(self, sites):
 *         self._this.BuildTensorProductBlock(sites)
 *     def default_op_components(self, direct,             # <<<<<<<<<<<<<<
 *                               RawSpinBlock lBlock, RawSpinBlock rBlock,
 *                               haveNormops, haveCompops,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.default_op_components", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":426
 *         cdef Storagetype t = storagetype
 *         self._this.setstoragetype(t)
 *     def default_op_components_compl(self, complementary, implicitTranspose):             # <<<<<<<<<<<<<<
 *         self._this.default_op_components(complementary, implicitTranspose)
 *     def set_complementary_sites(self, vector[int] c_sites):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_15default_op_components_compl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_15default_op_components_compl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_complementary = 0;
  PyObject *__pyx_v_implicitTranspose = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_op_components_compl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_complementary,&__pyx_n_s_implicitTranspose,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_complementary)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_implicitTranspose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_op_components_compl", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "default_op_components_compl") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_complementary = values[0];
    __pyx_v_implicitTranspose = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("default_op_components_compl", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.default_op_components_compl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_14default_op_components_compl(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), __pyx_v_complementary, __pyx_v_implicitTranspose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_14default_op_components_compl(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_complementary, PyObject *__pyx_v_implicitTranspose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("default_op_components_compl", 0);

  /* "_dmrg.pyx":427
 *         self._this.setstoragetype(t)
 *     def default_op_components_compl(self, complementary, implicitTranspose):
 *         self._this.default_op_components(complementary, implicitTranspose)             # <<<<<<<<<<<<<<
 *     def set_complementary_sites(self, vector[int] c_sites):
 *         #cdef vector[int] *csites = x_SpinBlock_complementary_sites(self._this)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_complementary); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_implicitTranspose); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base._this->default_op_components(__pyx_t_1, __pyx_t_2);

  /* "_dmrg.pyx":426
 *         cdef Storagetype t = storagetype
 *         self._this.setstoragetype(t)
 *     def default_op_components_compl(self, complementary, implicitTranspose):             # <<<<<<<<<<<<<<
 *         self._this.default_op_components(complementary, implicitTranspose)
 *     def set_complementary_sites(self, vector[int] c_sites):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.default_op_components_compl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":428
 *     def default_op_components_compl(self, complementary, implicitTranspose):
 *         self._this.default_op_components(complementary, implicitTranspose)
 *     def set_complementary_sites(self, vector[int] c_sites):             # <<<<<<<<<<<<<<
 *         #cdef vector[int] *csites = x_SpinBlock_complementary_sites(self._this)
 *         #for i in c_sites:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_17set_complementary_sites(PyObject *__pyx_v_self, PyObject *__pyx_arg_c_sites); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_17set_complementary_sites(PyObject *__pyx_v_self, PyObject *__pyx_arg_c_sites) {
  std::vector<int> __pyx_v_c_sites;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_complementary_sites (wrapper)", 0);
  assert(__pyx_arg_c_sites); {
    __pyx_v_c_sites = __pyx_convert_vector_from_py_int(__pyx_arg_c_sites); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.set_complementary_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_16set_complementary_sites(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((std::vector<int>)__pyx_v_c_sites));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_16set_complementary_sites(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, std::vector<int> __pyx_v_c_sites) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_complementary_sites", 0);

  /* "_dmrg.pyx":435
 *         #for i in c_sites:
 *         #    self._this.complementary_sites.push_back(i)
 *         self._this.complementary_sites = c_sites             # <<<<<<<<<<<<<<
 *     def set_twoInt(self):
 *         set_SpinBlock_twoInt(self._this)
 */
  __pyx_v_self->__pyx_base._this->complementary_sites = __pyx_v_c_sites;

  /* "_dmrg.pyx":428
 *     def default_op_components_compl(self, complementary, implicitTranspose):
 *         self._this.default_op_components(complementary, implicitTranspose)
 *     def set_complementary_sites(self, vector[int] c_sites):             # <<<<<<<<<<<<<<
 *         #cdef vector[int] *csites = x_SpinBlock_complementary_sites(self._this)
 *         #for i in c_sites:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":436
 *         #    self._this.complementary_sites.push_back(i)
 *         self._this.complementary_sites = c_sites
 *     def set_twoInt(self):             # <<<<<<<<<<<<<<
 *         set_SpinBlock_twoInt(self._this)
 *     def build_ops(self): # TODO add csf for overloaded build_operators
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_19set_twoInt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_19set_twoInt(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_twoInt (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_18set_twoInt(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_18set_twoInt(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_twoInt", 0);

  /* "_dmrg.pyx":437
 *         self._this.complementary_sites = c_sites
 *     def set_twoInt(self):
 *         set_SpinBlock_twoInt(self._this)             # <<<<<<<<<<<<<<
 *     def build_ops(self): # TODO add csf for overloaded build_operators
 *         self._this.build_iterators()
 */
  set_SpinBlock_twoInt(__pyx_v_self->__pyx_base._this);

  /* "_dmrg.pyx":436
 *         #    self._this.complementary_sites.push_back(i)
 *         self._this.complementary_sites = c_sites
 *     def set_twoInt(self):             # <<<<<<<<<<<<<<
 *         set_SpinBlock_twoInt(self._this)
 *     def build_ops(self): # TODO add csf for overloaded build_operators
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":438
 *     def set_twoInt(self):
 *         set_SpinBlock_twoInt(self._this)
 *     def build_ops(self): # TODO add csf for overloaded build_operators             # <<<<<<<<<<<<<<
 *         self._this.build_iterators()
 *         self._this.build_operators()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_21build_ops(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_21build_ops(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build_ops (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_20build_ops(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_20build_ops(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("build_ops", 0);

  /* "_dmrg.pyx":439
 *         set_SpinBlock_twoInt(self._this)
 *     def build_ops(self): # TODO add csf for overloaded build_operators
 *         self._this.build_iterators()             # <<<<<<<<<<<<<<
 *         self._this.build_operators()
 *     def addAdditionalCompOps(self):
 */
  __pyx_v_self->__pyx_base._this->build_iterators();

  /* "_dmrg.pyx":440
 *     def build_ops(self): # TODO add csf for overloaded build_operators
 *         self._this.build_iterators()
 *         self._this.build_operators()             # <<<<<<<<<<<<<<
 *     def addAdditionalCompOps(self):
 *         self._this.addAdditionalCompOps()
 */
  __pyx_v_self->__pyx_base._this->build_operators();

  /* "_dmrg.pyx":438
 *     def set_twoInt(self):
 *         set_SpinBlock_twoInt(self._this)
 *     def build_ops(self): # TODO add csf for overloaded build_operators             # <<<<<<<<<<<<<<
 *         self._this.build_iterators()
 *         self._this.build_operators()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":441
 *         self._this.build_iterators()
 *         self._this.build_operators()
 *     def addAdditionalCompOps(self):             # <<<<<<<<<<<<<<
 *         self._this.addAdditionalCompOps()
 *     def set_big_components(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_23addAdditionalCompOps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_23addAdditionalCompOps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAdditionalCompOps (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_22addAdditionalCompOps(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_22addAdditionalCompOps(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAdditionalCompOps", 0);

  /* "_dmrg.pyx":442
 *         self._this.build_operators()
 *     def addAdditionalCompOps(self):
 *         self._this.addAdditionalCompOps()             # <<<<<<<<<<<<<<
 *     def set_big_components(self):
 *         self._this.set_big_components()
 */
  __pyx_v_self->__pyx_base._this->addAdditionalCompOps();

  /* "_dmrg.pyx":441
 *         self._this.build_iterators()
 *         self._this.build_operators()
 *     def addAdditionalCompOps(self):             # <<<<<<<<<<<<<<
 *         self._this.addAdditionalCompOps()
 *     def set_big_components(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":443
 *     def addAdditionalCompOps(self):
 *         self._this.addAdditionalCompOps()
 *     def set_big_components(self):             # <<<<<<<<<<<<<<
 *         self._this.set_big_components()
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_25set_big_components(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_25set_big_components(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_big_components (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_24set_big_components(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_24set_big_components(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_big_components", 0);

  /* "_dmrg.pyx":444
 *         self._this.addAdditionalCompOps()
 *     def set_big_components(self):
 *         self._this.set_big_components()             # <<<<<<<<<<<<<<
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 *         self._this.transform_operators(rotatemat._this[0])
 */
  __pyx_v_self->__pyx_base._this->set_big_components();

  /* "_dmrg.pyx":443
 *     def addAdditionalCompOps(self):
 *         self._this.addAdditionalCompOps()
 *     def set_big_components(self):             # <<<<<<<<<<<<<<
 *         self._this.set_big_components()
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":445
 *     def set_big_components(self):
 *         self._this.set_big_components()
 *     def transform_operators(self, RawRotationMatrix rotatemat):             # <<<<<<<<<<<<<<
 *         self._this.transform_operators(rotatemat._this[0])
 *     def sync(self, RawSpinBlock lblock, RawSpinBlock rblock,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_27transform_operators(PyObject *__pyx_v_self, PyObject *__pyx_v_rotatemat); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_27transform_operators(PyObject *__pyx_v_self, PyObject *__pyx_v_rotatemat) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_operators (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rotatemat), __pyx_ptype_5_dmrg_RawRotationMatrix, 1, "rotatemat", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_26transform_operators(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((struct __pyx_obj_5_dmrg_RawRotationMatrix *)__pyx_v_rotatemat));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_26transform_operators(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_rotatemat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_operators", 0);

  /* "_dmrg.pyx":446
 *         self._this.set_big_components()
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 *         self._this.transform_operators(rotatemat._this[0])             # <<<<<<<<<<<<<<
 *     def sync(self, RawSpinBlock lblock, RawSpinBlock rblock,
 *              vector[int] sites, RawStateInfo bra, RawStateInfo ket):
 */
  __pyx_v_self->__pyx_base._this->transform_operators((__pyx_v_rotatemat->_this[0]));

  /* "_dmrg.pyx":445
 *     def set_big_components(self):
 *         self._this.set_big_components()
 *     def transform_operators(self, RawRotationMatrix rotatemat):             # <<<<<<<<<<<<<<
 *         self._this.transform_operators(rotatemat._this[0])
 *     def sync(self, RawSpinBlock lblock, RawSpinBlock rblock,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":447
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 *         self._this.transform_operators(rotatemat._this[0])
 *     def sync(self, RawSpinBlock lblock, RawSpinBlock rblock,             # <<<<<<<<<<<<<<
 *              vector[int] sites, RawStateInfo bra, RawStateInfo ket):
 *         #set_SpinBlock_for_BuildSumBlock(self._this, lblock._this, rblock._this,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_29sync(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_29sync(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lblock = 0;
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rblock = 0;
  std::vector<int> __pyx_v_sites;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_bra = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_ket = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sync (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lblock,&__pyx_n_s_rblock,&__pyx_n_s_sites,&__pyx_n_s_bra,&__pyx_n_s_ket,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lblock)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rblock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sync", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sites)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sync", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bra)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sync", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ket)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sync", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sync") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_lblock = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[0]);
    __pyx_v_rblock = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[1]);
    __pyx_v_sites = __pyx_convert_vector_from_py_int(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bra = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[3]);
    __pyx_v_ket = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sync", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.sync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_lblock), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "lblock", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rblock), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "rblock", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bra), __pyx_ptype_5_dmrg_RawStateInfo, 1, "bra", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ket), __pyx_ptype_5_dmrg_RawStateInfo, 1, "ket", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_28sync(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), __pyx_v_lblock, __pyx_v_rblock, __pyx_v_sites, __pyx_v_bra, __pyx_v_ket);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_28sync(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_lblock, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_rblock, std::vector<int> __pyx_v_sites, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_bra, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_ket) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  SpinAdapted::SpinBlock *__pyx_t_1;
  __Pyx_RefNannySetupContext("sync", 0);

  /* "_dmrg.pyx":451
 *         #set_SpinBlock_for_BuildSumBlock(self._this, lblock._this, rblock._this,
 *         #                                sites, si._this)
 *         self._this.leftBlock = lblock._this             # <<<<<<<<<<<<<<
 *         self._this.rightBlock = rblock._this
 *         self._this.sites = sites
 */
  __pyx_t_1 = __pyx_v_lblock->_this;
  __pyx_v_self->__pyx_base._this->leftBlock = __pyx_t_1;

  /* "_dmrg.pyx":452
 *         #                                sites, si._this)
 *         self._this.leftBlock = lblock._this
 *         self._this.rightBlock = rblock._this             # <<<<<<<<<<<<<<
 *         self._this.sites = sites
 *         self._this.braStateInfo = bra._this[0]
 */
  __pyx_t_1 = __pyx_v_rblock->_this;
  __pyx_v_self->__pyx_base._this->rightBlock = __pyx_t_1;

  /* "_dmrg.pyx":453
 *         self._this.leftBlock = lblock._this
 *         self._this.rightBlock = rblock._this
 *         self._this.sites = sites             # <<<<<<<<<<<<<<
 *         self._this.braStateInfo = bra._this[0]
 *         self._this.ketStateInfo = ket._this[0]
 */
  __pyx_v_self->__pyx_base._this->sites = __pyx_v_sites;

  /* "_dmrg.pyx":454
 *         self._this.rightBlock = rblock._this
 *         self._this.sites = sites
 *         self._this.braStateInfo = bra._this[0]             # <<<<<<<<<<<<<<
 *         self._this.ketStateInfo = ket._this[0]
 *     def set_loopblock(self, tf):
 */
  __pyx_v_self->__pyx_base._this->braStateInfo = (__pyx_v_bra->_this[0]);

  /* "_dmrg.pyx":455
 *         self._this.sites = sites
 *         self._this.braStateInfo = bra._this[0]
 *         self._this.ketStateInfo = ket._this[0]             # <<<<<<<<<<<<<<
 *     def set_loopblock(self, tf):
 *         self._this.set_loopblock(tf)
 */
  __pyx_v_self->__pyx_base._this->ketStateInfo = (__pyx_v_ket->_this[0]);

  /* "_dmrg.pyx":447
 *     def transform_operators(self, RawRotationMatrix rotatemat):
 *         self._this.transform_operators(rotatemat._this[0])
 *     def sync(self, RawSpinBlock lblock, RawSpinBlock rblock,             # <<<<<<<<<<<<<<
 *              vector[int] sites, RawStateInfo bra, RawStateInfo ket):
 *         #set_SpinBlock_for_BuildSumBlock(self._this, lblock._this, rblock._this,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":456
 *         self._this.braStateInfo = bra._this[0]
 *         self._this.ketStateInfo = ket._this[0]
 *     def set_loopblock(self, tf):             # <<<<<<<<<<<<<<
 *         self._this.set_loopblock(tf)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_31set_loopblock(PyObject *__pyx_v_self, PyObject *__pyx_v_tf); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15NewRawSpinBlock_31set_loopblock(PyObject *__pyx_v_self, PyObject *__pyx_v_tf) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_loopblock (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15NewRawSpinBlock_30set_loopblock(((struct __pyx_obj_5_dmrg_NewRawSpinBlock *)__pyx_v_self), ((PyObject *)__pyx_v_tf));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15NewRawSpinBlock_30set_loopblock(struct __pyx_obj_5_dmrg_NewRawSpinBlock *__pyx_v_self, PyObject *__pyx_v_tf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_loopblock", 0);

  /* "_dmrg.pyx":457
 *         self._this.ketStateInfo = ket._this[0]
 *     def set_loopblock(self, tf):
 *         self._this.set_loopblock(tf)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_tf); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base._this->set_loopblock(__pyx_t_1);

  /* "_dmrg.pyx":456
 *         self._this.braStateInfo = bra._this[0]
 *         self._this.ketStateInfo = ket._this[0]
 *     def set_loopblock(self, tf):             # <<<<<<<<<<<<<<
 *         self._this.set_loopblock(tf)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawSpinBlock.set_loopblock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":462
 * cdef class RawSparseMatrix:
 *     cdef SparseMatrix *_this
 *     def get_orbs(self): return self._this.get_orbs()             # <<<<<<<<<<<<<<
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_1get_orbs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_1get_orbs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orbs (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawSparseMatrix_get_orbs(((struct __pyx_obj_5_dmrg_RawSparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_get_orbs(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_orbs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->get_orbs()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.get_orbs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":463
 *     cdef SparseMatrix *_this
 *     def get_orbs(self): return self._this.get_orbs()
 *     def get_sign(self): return self._this.get_sign()             # <<<<<<<<<<<<<<
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_3get_sign(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_3get_sign(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sign (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawSparseMatrix_2get_sign(((struct __pyx_obj_5_dmrg_RawSparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_2get_sign(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sign", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->get_sign()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.get_sign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":464
 *     def get_orbs(self): return self._this.get_orbs()
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()             # <<<<<<<<<<<<<<
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_5get_fermion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_5get_fermion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fermion (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawSparseMatrix_4get_fermion(((struct __pyx_obj_5_dmrg_RawSparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_4get_fermion(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_fermion", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->get_fermion()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.get_fermion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":465
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)             # <<<<<<<<<<<<<<
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_7allowed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_7allowed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_j = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allowed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("allowed", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "allowed") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = values[0];
    __pyx_v_j = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("allowed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.allowed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_15RawSparseMatrix_6allowed(((struct __pyx_obj_5_dmrg_RawSparseMatrix *)__pyx_v_self), __pyx_v_i, __pyx_v_j);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_6allowed(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allowed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->_this->allowed(__pyx_t_1, __pyx_t_2) != 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.allowed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":466
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()             # <<<<<<<<<<<<<<
 * 
 * cdef class RawWavefunction:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_9get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawSparseMatrix_9get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_shape (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawSparseMatrix_8get_shape(((struct __pyx_obj_5_dmrg_RawSparseMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawSparseMatrix_8get_shape(struct __pyx_obj_5_dmrg_RawSparseMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_shape", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->nrows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_this->ncols()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawSparseMatrix.get_shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":472
 *     #cdef readonly NewRawStateInfo stateInfo
 *     #cdef public NewRawStateInfo stateInfo
 *     def get_deltaQuantum(self):             # <<<<<<<<<<<<<<
 *         #cdef SpinQuantum *p = &(self._this.set_deltaQuantum())
 *         #deltaQuantum = RawSpinQuantum()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_1get_deltaQuantum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_1get_deltaQuantum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_deltaQuantum (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_get_deltaQuantum(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_get_deltaQuantum(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  struct __pyx_obj_5_dmrg_RawSpinQuantum *__pyx_v_deltaQuantum = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_deltaQuantum", 0);

  /* "_dmrg.pyx":476
 *         #deltaQuantum = RawSpinQuantum()
 *         #deltaQuantum._this = p
 *         deltaQuantum = RawSpinQuantum()             # <<<<<<<<<<<<<<
 *         deltaQuantum._this = &(self._this.set_deltaQuantum()[0])
 *         return deltaQuantum
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_RawSpinQuantum)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_deltaQuantum = ((struct __pyx_obj_5_dmrg_RawSpinQuantum *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":477
 *         #deltaQuantum._this = p
 *         deltaQuantum = RawSpinQuantum()
 *         deltaQuantum._this = &(self._this.set_deltaQuantum()[0])             # <<<<<<<<<<<<<<
 *         return deltaQuantum
 *     def get_onedot(self): return self._this.get_onedot()
 */
  __pyx_v_deltaQuantum->_this = (&(__pyx_v_self->_this->set_deltaQuantum()[0]));

  /* "_dmrg.pyx":478
 *         deltaQuantum = RawSpinQuantum()
 *         deltaQuantum._this = &(self._this.set_deltaQuantum()[0])
 *         return deltaQuantum             # <<<<<<<<<<<<<<
 *     def get_onedot(self): return self._this.get_onedot()
 *     def get_orbs(self): return self._this.get_orbs()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_deltaQuantum));
  __pyx_r = ((PyObject *)__pyx_v_deltaQuantum);
  goto __pyx_L0;

  /* "_dmrg.pyx":472
 *     #cdef readonly NewRawStateInfo stateInfo
 *     #cdef public NewRawStateInfo stateInfo
 *     def get_deltaQuantum(self):             # <<<<<<<<<<<<<<
 *         #cdef SpinQuantum *p = &(self._this.set_deltaQuantum())
 *         #deltaQuantum = RawSpinQuantum()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_deltaQuantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_deltaQuantum);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":479
 *         deltaQuantum._this = &(self._this.set_deltaQuantum()[0])
 *         return deltaQuantum
 *     def get_onedot(self): return self._this.get_onedot()             # <<<<<<<<<<<<<<
 *     def get_orbs(self): return self._this.get_orbs()
 *     def get_sign(self): return self._this.get_sign()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_3get_onedot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_3get_onedot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_onedot (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_2get_onedot(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_2get_onedot(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_onedot", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->get_onedot()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_onedot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":480
 *         return deltaQuantum
 *     def get_onedot(self): return self._this.get_onedot()
 *     def get_orbs(self): return self._this.get_orbs()             # <<<<<<<<<<<<<<
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_5get_orbs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_5get_orbs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_orbs (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_4get_orbs(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_4get_orbs(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_orbs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->_this->get_orbs()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_orbs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":481
 *     def get_onedot(self): return self._this.get_onedot()
 *     def get_orbs(self): return self._this.get_orbs()
 *     def get_sign(self): return self._this.get_sign()             # <<<<<<<<<<<<<<
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_7get_sign(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_7get_sign(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sign (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_6get_sign(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_6get_sign(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sign", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->get_sign()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_sign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":482
 *     def get_orbs(self): return self._this.get_orbs()
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()             # <<<<<<<<<<<<<<
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_9get_fermion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_9get_fermion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fermion (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_8get_fermion(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_8get_fermion(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_fermion", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->get_fermion()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_fermion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":483
 *     def get_sign(self): return self._this.get_sign()
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)             # <<<<<<<<<<<<<<
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 *     def save(self, wfnfile, RawStateInfo stateInfo):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_11allowed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_11allowed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_i = 0;
  PyObject *__pyx_v_j = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allowed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("allowed", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "allowed") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = values[0];
    __pyx_v_j = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("allowed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.RawWavefunction.allowed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_10allowed(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self), __pyx_v_i, __pyx_v_j);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_10allowed(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self, PyObject *__pyx_v_i, PyObject *__pyx_v_j) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allowed", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_j); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->_this->allowed(__pyx_t_1, __pyx_t_2) != 0)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.allowed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":484
 *     def get_fermion(self): return self._this.get_fermion()
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()             # <<<<<<<<<<<<<<
 *     def save(self, wfnfile, RawStateInfo stateInfo):
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_13get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_13get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_shape (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_12get_shape(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_12get_shape(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_shape", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->nrows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_this->ncols()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawWavefunction.get_shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":485
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 *     def save(self, wfnfile, RawStateInfo stateInfo):             # <<<<<<<<<<<<<<
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 * cdef class NewRawWavefunction(RawWavefunction):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_15save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5_dmrg_15RawWavefunction_15save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_wfnfile = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stateInfo = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wfnfile,&__pyx_n_s_stateInfo,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wfnfile)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stateInfo)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("save", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_wfnfile = values[0];
    __pyx_v_stateInfo = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.RawWavefunction.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stateInfo), __pyx_ptype_5_dmrg_RawStateInfo, 1, "stateInfo", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_15RawWavefunction_14save(((struct __pyx_obj_5_dmrg_RawWavefunction *)__pyx_v_self), __pyx_v_wfnfile, __pyx_v_stateInfo);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_15RawWavefunction_14save(struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_self, PyObject *__pyx_v_wfnfile, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stateInfo) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "_dmrg.pyx":486
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 *     def save(self, wfnfile, RawStateInfo stateInfo):
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)             # <<<<<<<<<<<<<<
 * cdef class NewRawWavefunction(RawWavefunction):
 *     def __cinit__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_wfnfile); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  save_wavefunction(__pyx_t_1, __pyx_v_self->_this, __pyx_v_stateInfo->_this);

  /* "_dmrg.pyx":485
 *     def allowed(self, i, j): return <bint>self._this.allowed(i,j)
 *     def get_shape(self): return self._this.nrows(), self._this.ncols()
 *     def save(self, wfnfile, RawStateInfo stateInfo):             # <<<<<<<<<<<<<<
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 * cdef class NewRawWavefunction(RawWavefunction):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.RawWavefunction.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":488
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 * cdef class NewRawWavefunction(RawWavefunction):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new Wavefunction()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5_dmrg_18NewRawWavefunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5_dmrg_18NewRawWavefunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5_dmrg_18NewRawWavefunction___cinit__(((struct __pyx_obj_5_dmrg_NewRawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5_dmrg_18NewRawWavefunction___cinit__(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_dmrg.pyx":489
 * cdef class NewRawWavefunction(RawWavefunction):
 *     def __cinit__(self):
 *         self._this = new Wavefunction()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._this
 */
  __pyx_v_self->__pyx_base._this = new SpinAdapted::Wavefunction();

  /* "_dmrg.pyx":488
 *         save_wavefunction(wfnfile, self._this, stateInfo._this)
 * cdef class NewRawWavefunction(RawWavefunction):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new Wavefunction()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":490
 *     def __cinit__(self):
 *         self._this = new Wavefunction()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *         #TODO: call stateInfo.Free to release leftStateInfo, rightStateInfo, ...
 */

/* Python wrapper */
static void __pyx_pw_5_dmrg_18NewRawWavefunction_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5_dmrg_18NewRawWavefunction_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5_dmrg_18NewRawWavefunction_2__dealloc__(((struct __pyx_obj_5_dmrg_NewRawWavefunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5_dmrg_18NewRawWavefunction_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_dmrg.pyx":491
 *         self._this = new Wavefunction()
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 *         #TODO: call stateInfo.Free to release leftStateInfo, rightStateInfo, ...
 *     def load(self, wfnfile):
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":490
 *     def __cinit__(self):
 *         self._this = new Wavefunction()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *         #TODO: call stateInfo.Free to release leftStateInfo, rightStateInfo, ...
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_dmrg.pyx":493
 *         del self._this
 *         #TODO: call stateInfo.Free to release leftStateInfo, rightStateInfo, ...
 *     def load(self, wfnfile):             # <<<<<<<<<<<<<<
 *         #self.stateInfo = NewRawStateInfo()
 *         stateInfo = NewRawStateInfo()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_18NewRawWavefunction_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_wfnfile); /*proto*/
static PyObject *__pyx_pw_5_dmrg_18NewRawWavefunction_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_wfnfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_18NewRawWavefunction_4load(((struct __pyx_obj_5_dmrg_NewRawWavefunction *)__pyx_v_self), ((PyObject *)__pyx_v_wfnfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_18NewRawWavefunction_4load(struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_self, PyObject *__pyx_v_wfnfile) {
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_stateInfo = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_left = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_leftleft = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_leftright = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_right = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_rightleft = NULL;
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_rightright = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  SpinAdapted::StateInfo *__pyx_t_2;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "_dmrg.pyx":495
 *     def load(self, wfnfile):
 *         #self.stateInfo = NewRawStateInfo()
 *         stateInfo = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         stateInfo._this.hasAllocatedMemory = True
 *         left = NewRawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_stateInfo = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":496
 *         #self.stateInfo = NewRawStateInfo()
 *         stateInfo = NewRawStateInfo()
 *         stateInfo._this.hasAllocatedMemory = True             # <<<<<<<<<<<<<<
 *         left = NewRawStateInfo()
 *         leftleft = NewRawStateInfo()
 */
  __pyx_v_stateInfo->__pyx_base._this->hasAllocatedMemory = 1;

  /* "_dmrg.pyx":497
 *         stateInfo = NewRawStateInfo()
 *         stateInfo._this.hasAllocatedMemory = True
 *         left = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         leftleft = NewRawStateInfo()
 *         leftright = NewRawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_left = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":498
 *         stateInfo._this.hasAllocatedMemory = True
 *         left = NewRawStateInfo()
 *         leftleft = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         leftright = NewRawStateInfo()
 *         right = NewRawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_leftleft = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":499
 *         left = NewRawStateInfo()
 *         leftleft = NewRawStateInfo()
 *         leftright = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         right = NewRawStateInfo()
 *         rightleft = NewRawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_leftright = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":500
 *         leftleft = NewRawStateInfo()
 *         leftright = NewRawStateInfo()
 *         right = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         rightleft = NewRawStateInfo()
 *         rightright = NewRawStateInfo()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_right = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":501
 *         leftright = NewRawStateInfo()
 *         right = NewRawStateInfo()
 *         rightleft = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         rightright = NewRawStateInfo()
 *         left._this.leftStateInfo = leftleft._this
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rightleft = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":502
 *         right = NewRawStateInfo()
 *         rightleft = NewRawStateInfo()
 *         rightright = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *         left._this.leftStateInfo = leftleft._this
 *         left._this.rightStateInfo = leftright._this
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rightright = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":503
 *         rightleft = NewRawStateInfo()
 *         rightright = NewRawStateInfo()
 *         left._this.leftStateInfo = leftleft._this             # <<<<<<<<<<<<<<
 *         left._this.rightStateInfo = leftright._this
 *         stateInfo._this.leftStateInfo = left._this
 */
  __pyx_t_2 = __pyx_v_leftleft->__pyx_base._this;
  __pyx_v_left->__pyx_base._this->leftStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":504
 *         rightright = NewRawStateInfo()
 *         left._this.leftStateInfo = leftleft._this
 *         left._this.rightStateInfo = leftright._this             # <<<<<<<<<<<<<<
 *         stateInfo._this.leftStateInfo = left._this
 *         right._this.leftStateInfo = rightleft._this
 */
  __pyx_t_2 = __pyx_v_leftright->__pyx_base._this;
  __pyx_v_left->__pyx_base._this->rightStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":505
 *         left._this.leftStateInfo = leftleft._this
 *         left._this.rightStateInfo = leftright._this
 *         stateInfo._this.leftStateInfo = left._this             # <<<<<<<<<<<<<<
 *         right._this.leftStateInfo = rightleft._this
 *         right._this.rightStateInfo = rightright._this
 */
  __pyx_t_2 = __pyx_v_left->__pyx_base._this;
  __pyx_v_stateInfo->__pyx_base._this->leftStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":506
 *         left._this.rightStateInfo = leftright._this
 *         stateInfo._this.leftStateInfo = left._this
 *         right._this.leftStateInfo = rightleft._this             # <<<<<<<<<<<<<<
 *         right._this.rightStateInfo = rightright._this
 *         stateInfo._this.rightStateInfo = right._this
 */
  __pyx_t_2 = __pyx_v_rightleft->__pyx_base._this;
  __pyx_v_right->__pyx_base._this->leftStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":507
 *         stateInfo._this.leftStateInfo = left._this
 *         right._this.leftStateInfo = rightleft._this
 *         right._this.rightStateInfo = rightright._this             # <<<<<<<<<<<<<<
 *         stateInfo._this.rightStateInfo = right._this
 *         load_wavefunction(wfnfile, self._this, stateInfo._this)
 */
  __pyx_t_2 = __pyx_v_rightright->__pyx_base._this;
  __pyx_v_right->__pyx_base._this->rightStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":508
 *         right._this.leftStateInfo = rightleft._this
 *         right._this.rightStateInfo = rightright._this
 *         stateInfo._this.rightStateInfo = right._this             # <<<<<<<<<<<<<<
 *         load_wavefunction(wfnfile, self._this, stateInfo._this)
 *         return stateInfo, left, leftleft, leftright, \
 */
  __pyx_t_2 = __pyx_v_right->__pyx_base._this;
  __pyx_v_stateInfo->__pyx_base._this->rightStateInfo = __pyx_t_2;

  /* "_dmrg.pyx":509
 *         right._this.rightStateInfo = rightright._this
 *         stateInfo._this.rightStateInfo = right._this
 *         load_wavefunction(wfnfile, self._this, stateInfo._this)             # <<<<<<<<<<<<<<
 *         return stateInfo, left, leftleft, leftright, \
 *                 right, rightleft, rightright
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_wfnfile); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  load_wavefunction(__pyx_t_3, __pyx_v_self->__pyx_base._this, __pyx_v_stateInfo->__pyx_base._this);

  /* "_dmrg.pyx":510
 *         stateInfo._this.rightStateInfo = right._this
 *         load_wavefunction(wfnfile, self._this, stateInfo._this)
 *         return stateInfo, left, leftleft, leftright, \             # <<<<<<<<<<<<<<
 *                 right, rightleft, rightright
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "_dmrg.pyx":511
 *         load_wavefunction(wfnfile, self._this, stateInfo._this)
 *         return stateInfo, left, leftleft, leftright, \
 *                 right, rightleft, rightright             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_stateInfo));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_stateInfo));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_stateInfo));
  __Pyx_INCREF(((PyObject *)__pyx_v_left));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_left));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_left));
  __Pyx_INCREF(((PyObject *)__pyx_v_leftleft));
  PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_leftleft));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_leftleft));
  __Pyx_INCREF(((PyObject *)__pyx_v_leftright));
  PyTuple_SET_ITEM(__pyx_t_1, 3, ((PyObject *)__pyx_v_leftright));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_leftright));
  __Pyx_INCREF(((PyObject *)__pyx_v_right));
  PyTuple_SET_ITEM(__pyx_t_1, 4, ((PyObject *)__pyx_v_right));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_right));
  __Pyx_INCREF(((PyObject *)__pyx_v_rightleft));
  PyTuple_SET_ITEM(__pyx_t_1, 5, ((PyObject *)__pyx_v_rightleft));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rightleft));
  __Pyx_INCREF(((PyObject *)__pyx_v_rightright));
  PyTuple_SET_ITEM(__pyx_t_1, 6, ((PyObject *)__pyx_v_rightright));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rightright));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":493
 *         del self._this
 *         #TODO: call stateInfo.Free to release leftStateInfo, rightStateInfo, ...
 *     def load(self, wfnfile):             # <<<<<<<<<<<<<<
 *         #self.stateInfo = NewRawStateInfo()
 *         stateInfo = NewRawStateInfo()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.NewRawWavefunction.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_stateInfo);
  __Pyx_XDECREF((PyObject *)__pyx_v_left);
  __Pyx_XDECREF((PyObject *)__pyx_v_leftleft);
  __Pyx_XDECREF((PyObject *)__pyx_v_leftright);
  __Pyx_XDECREF((PyObject *)__pyx_v_right);
  __Pyx_XDECREF((PyObject *)__pyx_v_rightleft);
  __Pyx_XDECREF((PyObject *)__pyx_v_rightright);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":516
 * cdef class RawMatrix:
 *     cdef Matrix *_this
 *     def get_shape(self):             # <<<<<<<<<<<<<<
 *         return self._this.Nrows(), self._this.Ncols()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_9RawMatrix_1get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_9RawMatrix_1get_shape(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_shape (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_9RawMatrix_get_shape(((struct __pyx_obj_5_dmrg_RawMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_9RawMatrix_get_shape(struct __pyx_obj_5_dmrg_RawMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_shape", 0);

  /* "_dmrg.pyx":517
 *     cdef Matrix *_this
 *     def get_shape(self):
 *         return self._this.Nrows(), self._this.Ncols()             # <<<<<<<<<<<<<<
 * 
 * cdef class RawRotationMatrix:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_this->Nrows()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_this->Ncols()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":516
 * cdef class RawMatrix:
 *     cdef Matrix *_this
 *     def get_shape(self):             # <<<<<<<<<<<<<<
 *         return self._this.Nrows(), self._this.Ncols()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.RawMatrix.get_shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":521
 * cdef class RawRotationMatrix:
 *     cdef vector[Matrix] *_this
 *     def get_matrix_by_quanta_id(self, quanta_id):             # <<<<<<<<<<<<<<
 *         #mat = RawMatrix()
 *         #mat._this = &self._this.at(qid) # bug: vague return type?
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_1get_matrix_by_quanta_id(PyObject *__pyx_v_self, PyObject *__pyx_v_quanta_id); /*proto*/
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_1get_matrix_by_quanta_id(PyObject *__pyx_v_self, PyObject *__pyx_v_quanta_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_matrix_by_quanta_id (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_17RawRotationMatrix_get_matrix_by_quanta_id(((struct __pyx_obj_5_dmrg_RawRotationMatrix *)__pyx_v_self), ((PyObject *)__pyx_v_quanta_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_get_matrix_by_quanta_id(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_quanta_id) {
  Matrix *__pyx_v_mati;
  int __pyx_v_nrow;
  int __pyx_v_ncol;
  PyArrayObject *__pyx_v_mat = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_matrix_by_quanta_id", 0);

  /* "_dmrg.pyx":525
 *         #mat._this = &self._this.at(qid) # bug: vague return type?
 *         #mat.update_allprop()
 *         cdef Matrix *mati = &(self._this.at(quanta_id))             # <<<<<<<<<<<<<<
 *         cdef int nrow = mati.Nrows()
 *         cdef int ncol = mati.Ncols()
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_quanta_id); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mati = (&__pyx_v_self->_this->at(__pyx_t_1));

  /* "_dmrg.pyx":526
 *         #mat.update_allprop()
 *         cdef Matrix *mati = &(self._this.at(quanta_id))
 *         cdef int nrow = mati.Nrows()             # <<<<<<<<<<<<<<
 *         cdef int ncol = mati.Ncols()
 *         cdef numpy.ndarray mat = numpy.empty((nrow,ncol))
 */
  __pyx_v_nrow = __pyx_v_mati->Nrows();

  /* "_dmrg.pyx":527
 *         cdef Matrix *mati = &(self._this.at(quanta_id))
 *         cdef int nrow = mati.Nrows()
 *         cdef int ncol = mati.Ncols()             # <<<<<<<<<<<<<<
 *         cdef numpy.ndarray mat = numpy.empty((nrow,ncol))
 *         if nrow*ncol > 0:
 */
  __pyx_v_ncol = __pyx_v_mati->Ncols();

  /* "_dmrg.pyx":528
 *         cdef int nrow = mati.Nrows()
 *         cdef int ncol = mati.Ncols()
 *         cdef numpy.ndarray mat = numpy.empty((nrow,ncol))             # <<<<<<<<<<<<<<
 *         if nrow*ncol > 0:
 *             memcpy(<double *>mat.data, &mati.element(0,0), nrow*ncol*sizeof(int))
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nrow); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ncol); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_mat = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "_dmrg.pyx":529
 *         cdef int ncol = mati.Ncols()
 *         cdef numpy.ndarray mat = numpy.empty((nrow,ncol))
 *         if nrow*ncol > 0:             # <<<<<<<<<<<<<<
 *             memcpy(<double *>mat.data, &mati.element(0,0), nrow*ncol*sizeof(int))
 *         return mat
 */
  __pyx_t_6 = (((__pyx_v_nrow * __pyx_v_ncol) > 0) != 0);
  if (__pyx_t_6) {

    /* "_dmrg.pyx":530
 *         cdef numpy.ndarray mat = numpy.empty((nrow,ncol))
 *         if nrow*ncol > 0:
 *             memcpy(<double *>mat.data, &mati.element(0,0), nrow*ncol*sizeof(int))             # <<<<<<<<<<<<<<
 *         return mat
 *     def get_size(self): return self._this.size()
 */
    memcpy(((double *)__pyx_v_mat->data), (&__pyx_v_mati->element(0, 0)), ((__pyx_v_nrow * __pyx_v_ncol) * (sizeof(int))));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "_dmrg.pyx":531
 *         if nrow*ncol > 0:
 *             memcpy(<double *>mat.data, &mati.element(0,0), nrow*ncol*sizeof(int))
 *         return mat             # <<<<<<<<<<<<<<
 *     def get_size(self): return self._this.size()
 *     def save(self, filerotmat):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mat));
  __pyx_r = ((PyObject *)__pyx_v_mat);
  goto __pyx_L0;

  /* "_dmrg.pyx":521
 * cdef class RawRotationMatrix:
 *     cdef vector[Matrix] *_this
 *     def get_matrix_by_quanta_id(self, quanta_id):             # <<<<<<<<<<<<<<
 *         #mat = RawMatrix()
 *         #mat._this = &self._this.at(qid) # bug: vague return type?
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_dmrg.RawRotationMatrix.get_matrix_by_quanta_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":532
 *             memcpy(<double *>mat.data, &mati.element(0,0), nrow*ncol*sizeof(int))
 *         return mat
 *     def get_size(self): return self._this.size()             # <<<<<<<<<<<<<<
 *     def save(self, filerotmat):
 *         save_rotmat(filerotmat, self._this)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_3get_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_3get_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_size (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_17RawRotationMatrix_2get_size(((struct __pyx_obj_5_dmrg_RawRotationMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_2get_size(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_size", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_this->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.RawRotationMatrix.get_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":533
 *         return mat
 *     def get_size(self): return self._this.size()
 *     def save(self, filerotmat):             # <<<<<<<<<<<<<<
 *         save_rotmat(filerotmat, self._this)
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filerotmat); /*proto*/
static PyObject *__pyx_pw_5_dmrg_17RawRotationMatrix_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filerotmat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_17RawRotationMatrix_4save(((struct __pyx_obj_5_dmrg_RawRotationMatrix *)__pyx_v_self), ((PyObject *)__pyx_v_filerotmat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_17RawRotationMatrix_4save(struct __pyx_obj_5_dmrg_RawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_filerotmat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);

  /* "_dmrg.pyx":534
 *     def get_size(self): return self._this.size()
 *     def save(self, filerotmat):
 *         save_rotmat(filerotmat, self._this)             # <<<<<<<<<<<<<<
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 *     def __cinit__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filerotmat); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  save_rotmat(__pyx_t_1, __pyx_v_self->_this);

  /* "_dmrg.pyx":533
 *         return mat
 *     def get_size(self): return self._this.size()
 *     def save(self, filerotmat):             # <<<<<<<<<<<<<<
 *         save_rotmat(filerotmat, self._this)
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.RawRotationMatrix.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":536
 *         save_rotmat(filerotmat, self._this)
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new vector[Matrix]()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_5_dmrg_20NewRawRotationMatrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5_dmrg_20NewRawRotationMatrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5_dmrg_20NewRawRotationMatrix___cinit__(((struct __pyx_obj_5_dmrg_NewRawRotationMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5_dmrg_20NewRawRotationMatrix___cinit__(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<Matrix> *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_dmrg.pyx":537
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 *     def __cinit__(self):
 *         self._this = new vector[Matrix]()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self._this
 */
  try {
    __pyx_t_1 = new std::vector<Matrix>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->__pyx_base._this = __pyx_t_1;

  /* "_dmrg.pyx":536
 *         save_rotmat(filerotmat, self._this)
 * cdef class NewRawRotationMatrix(RawRotationMatrix):
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._this = new vector[Matrix]()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawRotationMatrix.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":538
 *     def __cinit__(self):
 *         self._this = new vector[Matrix]()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def load(self, filerotmat):
 */

/* Python wrapper */
static void __pyx_pw_5_dmrg_20NewRawRotationMatrix_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5_dmrg_20NewRawRotationMatrix_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5_dmrg_20NewRawRotationMatrix_2__dealloc__(((struct __pyx_obj_5_dmrg_NewRawRotationMatrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5_dmrg_20NewRawRotationMatrix_2__dealloc__(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_dmrg.pyx":539
 *         self._this = new vector[Matrix]()
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 *     def load(self, filerotmat):
 *         load_rotmat(filerotmat, self._this)
 */
  delete __pyx_v_self->__pyx_base._this;

  /* "_dmrg.pyx":538
 *     def __cinit__(self):
 *         self._this = new vector[Matrix]()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 *     def load(self, filerotmat):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_dmrg.pyx":540
 *     def __dealloc__(self):
 *         del self._this
 *     def load(self, filerotmat):             # <<<<<<<<<<<<<<
 *         load_rotmat(filerotmat, self._this)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_20NewRawRotationMatrix_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filerotmat); /*proto*/
static PyObject *__pyx_pw_5_dmrg_20NewRawRotationMatrix_5load(PyObject *__pyx_v_self, PyObject *__pyx_v_filerotmat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_20NewRawRotationMatrix_4load(((struct __pyx_obj_5_dmrg_NewRawRotationMatrix *)__pyx_v_self), ((PyObject *)__pyx_v_filerotmat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_20NewRawRotationMatrix_4load(struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_self, PyObject *__pyx_v_filerotmat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);

  /* "_dmrg.pyx":541
 *         del self._this
 *     def load(self, filerotmat):
 *         load_rotmat(filerotmat, self._this)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filerotmat); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  load_rotmat(__pyx_t_1, __pyx_v_self->__pyx_base._this);

  /* "_dmrg.pyx":540
 *     def __dealloc__(self):
 *         del self._this
 *     def load(self, filerotmat):             # <<<<<<<<<<<<<<
 *         load_rotmat(filerotmat, self._this)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.NewRawRotationMatrix.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":549
 * #################################################
 * 
 * def PyTensorProduct(RawStateInfo a, RawStateInfo b, int constraint):             # <<<<<<<<<<<<<<
 *     c = NewRawStateInfo()
 *     # constraint = 0 for NO_PARTICLE_SPIN_NUMBER_CONSTRAINT
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_1PyTensorProduct(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_1PyTensorProduct = {__Pyx_NAMESTR("PyTensorProduct"), (PyCFunction)__pyx_pw_5_dmrg_1PyTensorProduct, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_1PyTensorProduct(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_a = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_b = 0;
  int __pyx_v_constraint;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyTensorProduct (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_constraint,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PyTensorProduct", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_constraint)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PyTensorProduct", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PyTensorProduct") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[0]);
    __pyx_v_b = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[1]);
    __pyx_v_constraint = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_constraint == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PyTensorProduct", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.PyTensorProduct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_5_dmrg_RawStateInfo, 1, "a", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_5_dmrg_RawStateInfo, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_PyTensorProduct(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_constraint);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_PyTensorProduct(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_a, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_b, int __pyx_v_constraint) {
  struct __pyx_obj_5_dmrg_NewRawStateInfo *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyTensorProduct", 0);

  /* "_dmrg.pyx":550
 * 
 * def PyTensorProduct(RawStateInfo a, RawStateInfo b, int constraint):
 *     c = NewRawStateInfo()             # <<<<<<<<<<<<<<
 *     # constraint = 0 for NO_PARTICLE_SPIN_NUMBER_CONSTRAINT
 *     # constraint = 1 for PARTICLE_SPIN_NUMBER_CONSTRAINT
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawStateInfo)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_5_dmrg_NewRawStateInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":554
 *     # constraint = 1 for PARTICLE_SPIN_NUMBER_CONSTRAINT
 *     # I didn't find any call with compState other than NULL
 *     TensorProduct(a._this[0], b._this[0], c._this[0], constraint, NULL)             # <<<<<<<<<<<<<<
 *     return c
 * 
 */
  TensorProduct((__pyx_v_a->_this[0]), (__pyx_v_b->_this[0]), (__pyx_v_c->__pyx_base._this[0]), __pyx_v_constraint, NULL);

  /* "_dmrg.pyx":555
 *     # I didn't find any call with compState other than NULL
 *     TensorProduct(a._this[0], b._this[0], c._this[0], constraint, NULL)
 *     return c             # <<<<<<<<<<<<<<
 * 
 * def Pyupdate_rotmat(RawWavefunction wfn, RawSpinBlock sys, RawSpinBlock big,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "_dmrg.pyx":549
 * #################################################
 * 
 * def PyTensorProduct(RawStateInfo a, RawStateInfo b, int constraint):             # <<<<<<<<<<<<<<
 *     c = NewRawStateInfo()
 *     # constraint = 0 for NO_PARTICLE_SPIN_NUMBER_CONSTRAINT
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.PyTensorProduct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":557
 *     return c
 * 
 * def Pyupdate_rotmat(RawWavefunction wfn, RawSpinBlock sys, RawSpinBlock big,             # <<<<<<<<<<<<<<
 *                     keep_states, keep_qstates, noise):
 *     # rmat is resized in update_rotmat => makeRotateMatrix => assign_matrix_by_dm
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_3Pyupdate_rotmat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_3Pyupdate_rotmat = {__Pyx_NAMESTR("Pyupdate_rotmat"), (PyCFunction)__pyx_pw_5_dmrg_3Pyupdate_rotmat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_3Pyupdate_rotmat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfn = 0;
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_sys = 0;
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big = 0;
  PyObject *__pyx_v_keep_states = 0;
  PyObject *__pyx_v_keep_qstates = 0;
  PyObject *__pyx_v_noise = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyupdate_rotmat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wfn,&__pyx_n_s_sys,&__pyx_n_s_big,&__pyx_n_s_keep_states,&__pyx_n_s_keep_qstates,&__pyx_n_s_noise,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wfn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_big)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_states)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_qstates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_noise)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pyupdate_rotmat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_wfn = ((struct __pyx_obj_5_dmrg_RawWavefunction *)values[0]);
    __pyx_v_sys = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[1]);
    __pyx_v_big = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[2]);
    __pyx_v_keep_states = values[3];
    __pyx_v_keep_qstates = values[4];
    __pyx_v_noise = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pyupdate_rotmat", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.Pyupdate_rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wfn), __pyx_ptype_5_dmrg_RawWavefunction, 1, "wfn", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sys), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "sys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_big), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "big", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_2Pyupdate_rotmat(__pyx_self, __pyx_v_wfn, __pyx_v_sys, __pyx_v_big, __pyx_v_keep_states, __pyx_v_keep_qstates, __pyx_v_noise);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_2Pyupdate_rotmat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfn, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_sys, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big, PyObject *__pyx_v_keep_states, PyObject *__pyx_v_keep_qstates, PyObject *__pyx_v_noise) {
  struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_rmat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pyupdate_rotmat", 0);

  /* "_dmrg.pyx":560
 *                     keep_states, keep_qstates, noise):
 *     # rmat is resized in update_rotmat => makeRotateMatrix => assign_matrix_by_dm
 *     rmat = NewRawRotationMatrix()             # <<<<<<<<<<<<<<
 * 
 *     # TODO: add noise
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawRotationMatrix)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rmat = ((struct __pyx_obj_5_dmrg_NewRawRotationMatrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":564
 *     # TODO: add noise
 *     update_rotmat(rmat._this, wfn._this, sys._this, big._this,
 *                   keep_states, keep_qstates, noise)             # <<<<<<<<<<<<<<
 *     return rmat
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_keep_states); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_keep_qstates); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_noise); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":563
 * 
 *     # TODO: add noise
 *     update_rotmat(rmat._this, wfn._this, sys._this, big._this,             # <<<<<<<<<<<<<<
 *                   keep_states, keep_qstates, noise)
 *     return rmat
 */
  update_rotmat(__pyx_v_rmat->__pyx_base._this, __pyx_v_wfn->_this, __pyx_v_sys->_this, __pyx_v_big->_this, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "_dmrg.pyx":565
 *     update_rotmat(rmat._this, wfn._this, sys._this, big._this,
 *                   keep_states, keep_qstates, noise)
 *     return rmat             # <<<<<<<<<<<<<<
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rmat));
  __pyx_r = ((PyObject *)__pyx_v_rmat);
  goto __pyx_L0;

  /* "_dmrg.pyx":557
 *     return c
 * 
 * def Pyupdate_rotmat(RawWavefunction wfn, RawSpinBlock sys, RawSpinBlock big,             # <<<<<<<<<<<<<<
 *                     keep_states, keep_qstates, noise):
 *     # rmat is resized in update_rotmat => makeRotateMatrix => assign_matrix_by_dm
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.Pyupdate_rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rmat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":567
 *     return rmat
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):             # <<<<<<<<<<<<<<
 *     union_StateInfo_quanta(dest._this, source._this)
 *     return dest
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_5Pyunion_StateInfo_quanta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_5Pyunion_StateInfo_quanta = {__Pyx_NAMESTR("Pyunion_StateInfo_quanta"), (PyCFunction)__pyx_pw_5_dmrg_5Pyunion_StateInfo_quanta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_5Pyunion_StateInfo_quanta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_dest = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_source = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyunion_StateInfo_quanta (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest,&__pyx_n_s_source,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dest)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyunion_StateInfo_quanta", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pyunion_StateInfo_quanta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[0]);
    __pyx_v_source = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pyunion_StateInfo_quanta", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.Pyunion_StateInfo_quanta", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dest), __pyx_ptype_5_dmrg_RawStateInfo, 1, "dest", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source), __pyx_ptype_5_dmrg_RawStateInfo, 1, "source", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_4Pyunion_StateInfo_quanta(__pyx_self, __pyx_v_dest, __pyx_v_source);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_4Pyunion_StateInfo_quanta(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_dest, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_source) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyunion_StateInfo_quanta", 0);

  /* "_dmrg.pyx":568
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):
 *     union_StateInfo_quanta(dest._this, source._this)             # <<<<<<<<<<<<<<
 *     return dest
 * 
 */
  union_StateInfo_quanta(__pyx_v_dest->_this, __pyx_v_source->_this);

  /* "_dmrg.pyx":569
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):
 *     union_StateInfo_quanta(dest._this, source._this)
 *     return dest             # <<<<<<<<<<<<<<
 * 
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dest));
  __pyx_r = ((PyObject *)__pyx_v_dest);
  goto __pyx_L0;

  /* "_dmrg.pyx":567
 *     return rmat
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):             # <<<<<<<<<<<<<<
 *     union_StateInfo_quanta(dest._this, source._this)
 *     return dest
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":571
 *     return dest
 * 
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,             # <<<<<<<<<<<<<<
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_7PyBuildSlaterBlock_with_stateinfo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_7PyBuildSlaterBlock_with_stateinfo = {__Pyx_NAMESTR("PyBuildSlaterBlock_with_stateinfo"), (PyCFunction)__pyx_pw_5_dmrg_7PyBuildSlaterBlock_with_stateinfo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_7PyBuildSlaterBlock_with_stateinfo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_environ = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si = 0;
  PyObject *__pyx_v_envSites = 0;
  PyObject *__pyx_v_haveNormops = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PyBuildSlaterBlock_with_stateinfo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_environ,&__pyx_n_s_si,&__pyx_n_s_envSites,&__pyx_n_s_haveNormops,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_environ)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_si)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PyBuildSlaterBlock_with_stateinfo", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_envSites)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PyBuildSlaterBlock_with_stateinfo", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_haveNormops)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PyBuildSlaterBlock_with_stateinfo", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PyBuildSlaterBlock_with_stateinfo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_environ = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[0]);
    __pyx_v_si = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[1]);
    __pyx_v_envSites = values[2];
    __pyx_v_haveNormops = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PyBuildSlaterBlock_with_stateinfo", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.PyBuildSlaterBlock_with_stateinfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_environ), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "environ", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_si), __pyx_ptype_5_dmrg_RawStateInfo, 1, "si", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_6PyBuildSlaterBlock_with_stateinfo(__pyx_self, __pyx_v_environ, __pyx_v_si, __pyx_v_envSites, __pyx_v_haveNormops);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_6PyBuildSlaterBlock_with_stateinfo(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_environ, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_si, PyObject *__pyx_v_envSites, PyObject *__pyx_v_haveNormops) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<int> __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyBuildSlaterBlock_with_stateinfo", 0);

  /* "_dmrg.pyx":573
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,             # <<<<<<<<<<<<<<
 *                                     haveNormops)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_int(__pyx_v_envSites); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":574
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,
 *                                     haveNormops)             # <<<<<<<<<<<<<<
 * 
 * def Pysolve_wavefunction(RawSpinBlock big, nroots, dot_with_sys, warmUp,
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_haveNormops); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":573
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,             # <<<<<<<<<<<<<<
 *                                     haveNormops)
 * 
 */
  BuildSlaterBlock_with_stateinfo((__pyx_v_environ->_this[0]), (__pyx_v_si->_this[0]), __pyx_t_1, __pyx_t_2);

  /* "_dmrg.pyx":571
 *     return dest
 * 
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,             # <<<<<<<<<<<<<<
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.PyBuildSlaterBlock_with_stateinfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":576
 *                                     haveNormops)
 * 
 * def Pysolve_wavefunction(RawSpinBlock big, nroots, dot_with_sys, warmUp,             # <<<<<<<<<<<<<<
 *                          onedot, tol, guesstype, additional_noise):
 *     cdef vector[Wavefunction] solution
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_9Pysolve_wavefunction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_9Pysolve_wavefunction = {__Pyx_NAMESTR("Pysolve_wavefunction"), (PyCFunction)__pyx_pw_5_dmrg_9Pysolve_wavefunction, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_9Pysolve_wavefunction(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big = 0;
  PyObject *__pyx_v_nroots = 0;
  PyObject *__pyx_v_dot_with_sys = 0;
  PyObject *__pyx_v_warmUp = 0;
  PyObject *__pyx_v_onedot = 0;
  PyObject *__pyx_v_tol = 0;
  PyObject *__pyx_v_guesstype = 0;
  PyObject *__pyx_v_additional_noise = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pysolve_wavefunction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_big,&__pyx_n_s_nroots,&__pyx_n_s_dot_with_sys,&__pyx_n_s_warmUp,&__pyx_n_s_onedot,&__pyx_n_s_tol,&__pyx_n_s_guesstype,&__pyx_n_s_additional_noise,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_big)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nroots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dot_with_sys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_warmUp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_onedot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_guesstype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_additional_noise)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pysolve_wavefunction") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_big = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[0]);
    __pyx_v_nroots = values[1];
    __pyx_v_dot_with_sys = values[2];
    __pyx_v_warmUp = values[3];
    __pyx_v_onedot = values[4];
    __pyx_v_tol = values[5];
    __pyx_v_guesstype = values[6];
    __pyx_v_additional_noise = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pysolve_wavefunction", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.Pysolve_wavefunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_big), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "big", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_8Pysolve_wavefunction(__pyx_self, __pyx_v_big, __pyx_v_nroots, __pyx_v_dot_with_sys, __pyx_v_warmUp, __pyx_v_onedot, __pyx_v_tol, __pyx_v_guesstype, __pyx_v_additional_noise);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_8Pysolve_wavefunction(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_big, PyObject *__pyx_v_nroots, PyObject *__pyx_v_dot_with_sys, PyObject *__pyx_v_warmUp, PyObject *__pyx_v_onedot, PyObject *__pyx_v_tol, PyObject *__pyx_v_guesstype, PyObject *__pyx_v_additional_noise) {
  std::vector<SpinAdapted::Wavefunction> __pyx_v_solution;
  std::vector<double> __pyx_v_energies;
  enum SpinAdapted::guessWaveTypes __pyx_v_gt;
  int __pyx_v_currentRoot;
  std::vector<SpinAdapted::Wavefunction> __pyx_v_lowerStates;
  struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_wfn = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  enum SpinAdapted::guessWaveTypes __pyx_t_2;
  double __pyx_t_3;
  bool __pyx_t_4;
  bool __pyx_t_5;
  bool __pyx_t_6;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pysolve_wavefunction", 0);

  /* "_dmrg.pyx":579
 *                          onedot, tol, guesstype, additional_noise):
 *     cdef vector[Wavefunction] solution
 *     solution.resize(nroots)             # <<<<<<<<<<<<<<
 *     cdef vector[double] energies
 *     energies.resize(nroots)
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_nroots); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_solution.resize(__pyx_t_1);

  /* "_dmrg.pyx":581
 *     solution.resize(nroots)
 *     cdef vector[double] energies
 *     energies.resize(nroots)             # <<<<<<<<<<<<<<
 *     cdef guessWaveTypes gt = guesstype
 *     cdef int currentRoot = -1
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_nroots); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_energies.resize(__pyx_t_1);

  /* "_dmrg.pyx":582
 *     cdef vector[double] energies
 *     energies.resize(nroots)
 *     cdef guessWaveTypes gt = guesstype             # <<<<<<<<<<<<<<
 *     cdef int currentRoot = -1
 *     cdef vector[Wavefunction] lowerStates
 */
  __pyx_t_2 = ((enum SpinAdapted::guessWaveTypes)PyInt_AsLong(__pyx_v_guesstype)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_gt = __pyx_t_2;

  /* "_dmrg.pyx":583
 *     energies.resize(nroots)
 *     cdef guessWaveTypes gt = guesstype
 *     cdef int currentRoot = -1             # <<<<<<<<<<<<<<
 *     cdef vector[Wavefunction] lowerStates
 *     solve_wavefunction(solution, energies, big._this[0], tol, gt,
 */
  __pyx_v_currentRoot = -1;

  /* "_dmrg.pyx":585
 *     cdef int currentRoot = -1
 *     cdef vector[Wavefunction] lowerStates
 *     solve_wavefunction(solution, energies, big._this[0], tol, gt,             # <<<<<<<<<<<<<<
 *                        onedot, dot_with_sys, warmUp, additional_noise,
 *                        currentRoot, lowerStates)
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":586
 *     cdef vector[Wavefunction] lowerStates
 *     solve_wavefunction(solution, energies, big._this[0], tol, gt,
 *                        onedot, dot_with_sys, warmUp, additional_noise,             # <<<<<<<<<<<<<<
 *                        currentRoot, lowerStates)
 *     wfn = NewRawWavefunction()
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_onedot); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_dot_with_sys); if (unlikely((__pyx_t_5 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_warmUp); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_additional_noise); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":585
 *     cdef int currentRoot = -1
 *     cdef vector[Wavefunction] lowerStates
 *     solve_wavefunction(solution, energies, big._this[0], tol, gt,             # <<<<<<<<<<<<<<
 *                        onedot, dot_with_sys, warmUp, additional_noise,
 *                        currentRoot, lowerStates)
 */
  SpinAdapted::Solver::solve_wavefunction(__pyx_v_solution, __pyx_v_energies, (__pyx_v_big->_this[0]), __pyx_t_3, __pyx_v_gt, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_v_currentRoot, __pyx_v_lowerStates);

  /* "_dmrg.pyx":588
 *                        onedot, dot_with_sys, warmUp, additional_noise,
 *                        currentRoot, lowerStates)
 *     wfn = NewRawWavefunction()             # <<<<<<<<<<<<<<
 *     wfn._this[0] = solution[0]
 *     return wfn, energies[0]
 */
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawWavefunction)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_wfn = ((struct __pyx_obj_5_dmrg_NewRawWavefunction *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "_dmrg.pyx":589
 *                        currentRoot, lowerStates)
 *     wfn = NewRawWavefunction()
 *     wfn._this[0] = solution[0]             # <<<<<<<<<<<<<<
 *     return wfn, energies[0]
 * 
 */
  (__pyx_v_wfn->__pyx_base._this[0]) = (__pyx_v_solution[0]);

  /* "_dmrg.pyx":590
 *     wfn = NewRawWavefunction()
 *     wfn._this[0] = solution[0]
 *     return wfn, energies[0]             # <<<<<<<<<<<<<<
 * 
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_energies[0])); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(((PyObject *)__pyx_v_wfn));
  PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_wfn));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_wfn));
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":576
 *                                     haveNormops)
 * 
 * def Pysolve_wavefunction(RawSpinBlock big, nroots, dot_with_sys, warmUp,             # <<<<<<<<<<<<<<
 *                          onedot, tol, guesstype, additional_noise):
 *     cdef vector[Wavefunction] solution
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("_dmrg.Pysolve_wavefunction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wfn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":592
 *     return wfn, energies[0]
 * 
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,             # <<<<<<<<<<<<<<
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_11Pyonedot_shufflesysdot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_11Pyonedot_shufflesysdot = {__Pyx_NAMESTR("Pyonedot_shufflesysdot"), (PyCFunction)__pyx_pw_5_dmrg_11Pyonedot_shufflesysdot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_11Pyonedot_shufflesysdot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_sguess = 0;
  struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stranspose = 0;
  struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfguess = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyonedot_shufflesysdot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sguess,&__pyx_n_s_stranspose,&__pyx_n_s_wfguess,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sguess)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stranspose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyonedot_shufflesysdot", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wfguess)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyonedot_shufflesysdot", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pyonedot_shufflesysdot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sguess = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[0]);
    __pyx_v_stranspose = ((struct __pyx_obj_5_dmrg_RawStateInfo *)values[1]);
    __pyx_v_wfguess = ((struct __pyx_obj_5_dmrg_RawWavefunction *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pyonedot_shufflesysdot", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.Pyonedot_shufflesysdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sguess), __pyx_ptype_5_dmrg_RawStateInfo, 1, "sguess", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stranspose), __pyx_ptype_5_dmrg_RawStateInfo, 1, "stranspose", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wfguess), __pyx_ptype_5_dmrg_RawWavefunction, 1, "wfguess", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_10Pyonedot_shufflesysdot(__pyx_self, __pyx_v_sguess, __pyx_v_stranspose, __pyx_v_wfguess);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_10Pyonedot_shufflesysdot(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_sguess, struct __pyx_obj_5_dmrg_RawStateInfo *__pyx_v_stranspose, struct __pyx_obj_5_dmrg_RawWavefunction *__pyx_v_wfguess) {
  struct __pyx_obj_5_dmrg_NewRawWavefunction *__pyx_v_wftranspose = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pyonedot_shufflesysdot", 0);

  /* "_dmrg.pyx":594
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()             # <<<<<<<<<<<<<<
 *     wftranspose._this[0] = wfguess._this[0]
 *     onedot_shufflesysdot(sguess._this[0], stranspose._this[0],
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawWavefunction)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wftranspose = ((struct __pyx_obj_5_dmrg_NewRawWavefunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":595
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()
 *     wftranspose._this[0] = wfguess._this[0]             # <<<<<<<<<<<<<<
 *     onedot_shufflesysdot(sguess._this[0], stranspose._this[0],
 *                          wfguess._this[0], wftranspose._this[0])
 */
  (__pyx_v_wftranspose->__pyx_base._this[0]) = (__pyx_v_wfguess->_this[0]);

  /* "_dmrg.pyx":596
 *     wftranspose = NewRawWavefunction()
 *     wftranspose._this[0] = wfguess._this[0]
 *     onedot_shufflesysdot(sguess._this[0], stranspose._this[0],             # <<<<<<<<<<<<<<
 *                          wfguess._this[0], wftranspose._this[0])
 *     return wftranspose
 */
  SpinAdapted::GuessWave::onedot_shufflesysdot((__pyx_v_sguess->_this[0]), (__pyx_v_stranspose->_this[0]), (__pyx_v_wfguess->_this[0]), (__pyx_v_wftranspose->__pyx_base._this[0]));

  /* "_dmrg.pyx":598
 *     onedot_shufflesysdot(sguess._this[0], stranspose._this[0],
 *                          wfguess._this[0], wftranspose._this[0])
 *     return wftranspose             # <<<<<<<<<<<<<<
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_wftranspose));
  __pyx_r = ((PyObject *)__pyx_v_wftranspose);
  goto __pyx_L0;

  /* "_dmrg.pyx":592
 *     return wfn, energies[0]
 * 
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,             # <<<<<<<<<<<<<<
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.Pyonedot_shufflesysdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wftranspose);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":600
 *     return wftranspose
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):             # <<<<<<<<<<<<<<
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_13Pyguess_rotmat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_13Pyguess_rotmat = {__Pyx_NAMESTR("Pyguess_rotmat"), (PyCFunction)__pyx_pw_5_dmrg_13Pyguess_rotmat, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_13Pyguess_rotmat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_newsys = 0;
  PyObject *__pyx_v_keep_states = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyguess_rotmat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_newsys,&__pyx_n_s_keep_states,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_newsys)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_states)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Pyguess_rotmat", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Pyguess_rotmat") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_newsys = ((struct __pyx_obj_5_dmrg_RawSpinBlock *)values[0]);
    __pyx_v_keep_states = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Pyguess_rotmat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_dmrg.Pyguess_rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newsys), __pyx_ptype_5_dmrg_RawSpinBlock, 1, "newsys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_5_dmrg_12Pyguess_rotmat(__pyx_self, __pyx_v_newsys, __pyx_v_keep_states);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_12Pyguess_rotmat(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_5_dmrg_RawSpinBlock *__pyx_v_newsys, PyObject *__pyx_v_keep_states) {
  struct __pyx_obj_5_dmrg_NewRawRotationMatrix *__pyx_v_rotmat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pyguess_rotmat", 0);

  /* "_dmrg.pyx":601
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):
 *     rotmat = NewRawRotationMatrix()             # <<<<<<<<<<<<<<
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 *     return rotmat
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5_dmrg_NewRawRotationMatrix)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rotmat = ((struct __pyx_obj_5_dmrg_NewRawRotationMatrix *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_dmrg.pyx":602
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)             # <<<<<<<<<<<<<<
 *     return rotmat
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_keep_states); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  guess_rotmat(__pyx_v_rotmat->__pyx_base._this, __pyx_v_newsys->_this, __pyx_t_2);

  /* "_dmrg.pyx":603
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 *     return rotmat             # <<<<<<<<<<<<<<
 * 
 * #def Pyinitialize_defaults(fcidump, prefix, sym):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rotmat));
  __pyx_r = ((PyObject *)__pyx_v_rotmat);
  goto __pyx_L0;

  /* "_dmrg.pyx":600
 *     return wftranspose
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):             # <<<<<<<<<<<<<<
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.Pyguess_rotmat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rotmat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":607
 * #def Pyinitialize_defaults(fcidump, prefix, sym):
 * #    initialize_default_dmrginp(fcidump, prefix, sym)
 * def Pyinitialize_defaults(inp_conf):             # <<<<<<<<<<<<<<
 *     init_dmrginp(inp_conf)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_15Pyinitialize_defaults(PyObject *__pyx_self, PyObject *__pyx_v_inp_conf); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_15Pyinitialize_defaults = {__Pyx_NAMESTR("Pyinitialize_defaults"), (PyCFunction)__pyx_pw_5_dmrg_15Pyinitialize_defaults, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_15Pyinitialize_defaults(PyObject *__pyx_self, PyObject *__pyx_v_inp_conf) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyinitialize_defaults (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_14Pyinitialize_defaults(__pyx_self, ((PyObject *)__pyx_v_inp_conf));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_14Pyinitialize_defaults(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_inp_conf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pyinitialize_defaults", 0);

  /* "_dmrg.pyx":608
 * #    initialize_default_dmrginp(fcidump, prefix, sym)
 * def Pyinitialize_defaults(inp_conf):
 *     init_dmrginp(inp_conf)             # <<<<<<<<<<<<<<
 * 
 * def Pyget_last_site_id():
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_inp_conf); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  init_dmrginp(__pyx_t_1);

  /* "_dmrg.pyx":607
 * #def Pyinitialize_defaults(fcidump, prefix, sym):
 * #    initialize_default_dmrginp(fcidump, prefix, sym)
 * def Pyinitialize_defaults(inp_conf):             # <<<<<<<<<<<<<<
 *     init_dmrginp(inp_conf)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_dmrg.Pyinitialize_defaults", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":610
 *     init_dmrginp(inp_conf)
 * 
 * def Pyget_last_site_id():             # <<<<<<<<<<<<<<
 *     return get_last_site_id()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_17Pyget_last_site_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_17Pyget_last_site_id = {__Pyx_NAMESTR("Pyget_last_site_id"), (PyCFunction)__pyx_pw_5_dmrg_17Pyget_last_site_id, METH_NOARGS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_17Pyget_last_site_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pyget_last_site_id (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_16Pyget_last_site_id(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_16Pyget_last_site_id(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pyget_last_site_id", 0);

  /* "_dmrg.pyx":611
 * 
 * def Pyget_last_site_id():
 *     return get_last_site_id()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(get_last_site_id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_dmrg.pyx":610
 *     init_dmrginp(inp_conf)
 * 
 * def Pyget_last_site_id():             # <<<<<<<<<<<<<<
 *     return get_last_site_id()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.Pyget_last_site_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":615
 * 
 * 
 * def Pysync2dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_19Pysync2dmrginp(PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_19Pysync2dmrginp = {__Pyx_NAMESTR("Pysync2dmrginp"), (PyCFunction)__pyx_pw_5_dmrg_19Pysync2dmrginp, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_19Pysync2dmrginp(PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pysync2dmrginp (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_18Pysync2dmrginp(__pyx_self, ((PyObject *)__pyx_v_dmrgenv));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_18Pysync2dmrginp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::vector<int> __pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  std::vector<double> __pyx_t_8;
  enum SpinAdapted::calcType __pyx_t_9;
  enum SpinAdapted::noiseTypes __pyx_t_10;
  enum SpinAdapted::hamTypes __pyx_t_11;
  enum SpinAdapted::solveTypes __pyx_t_12;
  double __pyx_t_13;
  enum SpinAdapted::algorithmTypes __pyx_t_14;
  enum SpinAdapted::orbitalFormat __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pysync2dmrginp", 0);

  /* "_dmrg.pyx":617
 * def Pysync2dmrginp(dmrgenv):
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2             # <<<<<<<<<<<<<<
 *     dmrginp.m_beta = (dmrgenv.nelec - dmrgenv.spin) / 2
 *     #dmrginp.m_Sz =
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nelec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_int_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  SpinAdapted::dmrginp.m_alpha = __pyx_t_4;

  /* "_dmrg.pyx":618
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2
 *     dmrginp.m_beta = (dmrgenv.nelec - dmrgenv.spin) / 2             # <<<<<<<<<<<<<<
 *     #dmrginp.m_Sz =
 *     #dmrginp.m_total_spin = dmrgenv.spin
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nelec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_beta = __pyx_t_4;

  /* "_dmrg.pyx":622
 *     #dmrginp.m_total_spin = dmrgenv.spin
 *     #dmrginp.m_guess_permutations =
 *     dmrginp.m_hf_occupancy = dmrgenv.hf_occupancy             # <<<<<<<<<<<<<<
 *     dmrginp.m_hf_occ_user = dmrgenv.hf_occ_user
 *     dmrginp.m_spinAdapted = dmrgenv.spinAdapted
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_hf_occupancy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_hf_occupancy = __pyx_t_5;

  /* "_dmrg.pyx":623
 *     #dmrginp.m_guess_permutations =
 *     dmrginp.m_hf_occupancy = dmrgenv.hf_occupancy
 *     dmrginp.m_hf_occ_user = dmrgenv.hf_occ_user             # <<<<<<<<<<<<<<
 *     dmrginp.m_spinAdapted = dmrgenv.spinAdapted
 *     dmrginp.m_Bogoliubov = dmrgenv.Bogoliubov
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_hf_occ_user); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_hf_occ_user = __pyx_t_6;

  /* "_dmrg.pyx":624
 *     dmrginp.m_hf_occupancy = dmrgenv.hf_occupancy
 *     dmrginp.m_hf_occ_user = dmrgenv.hf_occ_user
 *     dmrginp.m_spinAdapted = dmrgenv.spinAdapted             # <<<<<<<<<<<<<<
 *     dmrginp.m_Bogoliubov = dmrgenv.Bogoliubov
 *     dmrginp.m_weights = dmrgenv.weights
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spinAdapted); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_spinAdapted = __pyx_t_7;

  /* "_dmrg.pyx":625
 *     dmrginp.m_hf_occ_user = dmrgenv.hf_occ_user
 *     dmrginp.m_spinAdapted = dmrgenv.spinAdapted
 *     dmrginp.m_Bogoliubov = dmrgenv.Bogoliubov             # <<<<<<<<<<<<<<
 *     dmrginp.m_weights = dmrgenv.weights
 *     dmrginp.m_sweep_iter_schedule = dmrgenv.sweep_iter_schedule
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_Bogoliubov); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_Bogoliubov = __pyx_t_7;

  /* "_dmrg.pyx":626
 *     dmrginp.m_spinAdapted = dmrgenv.spinAdapted
 *     dmrginp.m_Bogoliubov = dmrgenv.Bogoliubov
 *     dmrginp.m_weights = dmrgenv.weights             # <<<<<<<<<<<<<<
 *     dmrginp.m_sweep_iter_schedule = dmrgenv.sweep_iter_schedule
 *     dmrginp.m_sweep_state_schedule = dmrgenv.sweep_state_schedule
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_weights); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_weights = __pyx_t_8;

  /* "_dmrg.pyx":627
 *     dmrginp.m_Bogoliubov = dmrgenv.Bogoliubov
 *     dmrginp.m_weights = dmrgenv.weights
 *     dmrginp.m_sweep_iter_schedule = dmrgenv.sweep_iter_schedule             # <<<<<<<<<<<<<<
 *     dmrginp.m_sweep_state_schedule = dmrgenv.sweep_state_schedule
 *     dmrginp.m_sweep_tol_schedule = dmrgenv.davidson_tol_schedule
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_iter_schedule); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sweep_iter_schedule = __pyx_t_5;

  /* "_dmrg.pyx":628
 *     dmrginp.m_weights = dmrgenv.weights
 *     dmrginp.m_sweep_iter_schedule = dmrgenv.sweep_iter_schedule
 *     dmrginp.m_sweep_state_schedule = dmrgenv.sweep_state_schedule             # <<<<<<<<<<<<<<
 *     dmrginp.m_sweep_tol_schedule = dmrgenv.davidson_tol_schedule
 *     dmrginp.m_sweep_noise_schedule = dmrgenv.noise_schedule
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_state_schedule); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sweep_state_schedule = __pyx_t_5;

  /* "_dmrg.pyx":629
 *     dmrginp.m_sweep_iter_schedule = dmrgenv.sweep_iter_schedule
 *     dmrginp.m_sweep_state_schedule = dmrgenv.sweep_state_schedule
 *     dmrginp.m_sweep_tol_schedule = dmrgenv.davidson_tol_schedule             # <<<<<<<<<<<<<<
 *     dmrginp.m_sweep_noise_schedule = dmrgenv.noise_schedule
 *     #dmrginp.m_schedule_type_default =
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_davidson_tol_schedule); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sweep_tol_schedule = __pyx_t_8;

  /* "_dmrg.pyx":630
 *     dmrginp.m_sweep_state_schedule = dmrgenv.sweep_state_schedule
 *     dmrginp.m_sweep_tol_schedule = dmrgenv.davidson_tol_schedule
 *     dmrginp.m_sweep_noise_schedule = dmrgenv.noise_schedule             # <<<<<<<<<<<<<<
 *     #dmrginp.m_schedule_type_default =
 *     #dmrginp.m_schedule_type_backward =
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_noise_schedule); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sweep_noise_schedule = __pyx_t_8;

  /* "_dmrg.pyx":633
 *     #dmrginp.m_schedule_type_default =
 *     #dmrginp.m_schedule_type_backward =
 *     dmrginp.m_lastM = dmrgenv.lastM             # <<<<<<<<<<<<<<
 *     dmrginp.m_startM = dmrgenv.startM
 *     dmrginp.m_maxM = dmrgenv.maxM
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_lastM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_lastM = __pyx_t_4;

  /* "_dmrg.pyx":634
 *     #dmrginp.m_schedule_type_backward =
 *     dmrginp.m_lastM = dmrgenv.lastM
 *     dmrginp.m_startM = dmrgenv.startM             # <<<<<<<<<<<<<<
 *     dmrginp.m_maxM = dmrgenv.maxM
 * #    dmrginp.m_integral_disk_storage_thresh = dmrgenv.integral_disk_storage_thresh
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_startM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_startM = __pyx_t_4;

  /* "_dmrg.pyx":635
 *     dmrginp.m_lastM = dmrgenv.lastM
 *     dmrginp.m_startM = dmrgenv.startM
 *     dmrginp.m_maxM = dmrgenv.maxM             # <<<<<<<<<<<<<<
 * #    dmrginp.m_integral_disk_storage_thresh = dmrgenv.integral_disk_storage_thresh
 * #    dmrginp.m_do_diis = dmrgenv.do_diis
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_maxM); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_maxM = __pyx_t_4;

  /* "_dmrg.pyx":642
 * #    dmrginp.m_diis_keep_states = dmrgenv.diis_keep_states
 * #    dmrginp.m_diis_error_tol = dmrgenv.diis_error_tol
 *     dmrginp.m_calc_type = dmrgenv.calc_type             # <<<<<<<<<<<<<<
 *     dmrginp.m_noise_type = dmrgenv.noise_type
 *     dmrginp.m_ham_type = dmrgenv.ham_type
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_calc_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = ((enum SpinAdapted::calcType)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_calc_type = __pyx_t_9;

  /* "_dmrg.pyx":643
 * #    dmrginp.m_diis_error_tol = dmrgenv.diis_error_tol
 *     dmrginp.m_calc_type = dmrgenv.calc_type
 *     dmrginp.m_noise_type = dmrgenv.noise_type             # <<<<<<<<<<<<<<
 *     dmrginp.m_ham_type = dmrgenv.ham_type
 *     dmrginp.m_nroots = dmrgenv.nroots
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_noise_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = ((enum SpinAdapted::noiseTypes)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_noise_type = __pyx_t_10;

  /* "_dmrg.pyx":644
 *     dmrginp.m_calc_type = dmrgenv.calc_type
 *     dmrginp.m_noise_type = dmrgenv.noise_type
 *     dmrginp.m_ham_type = dmrgenv.ham_type             # <<<<<<<<<<<<<<
 *     dmrginp.m_nroots = dmrgenv.nroots
 *     dmrginp.m_solve_type = dmrgenv.solve_type
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_ham_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = ((enum SpinAdapted::hamTypes)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_ham_type = __pyx_t_11;

  /* "_dmrg.pyx":645
 *     dmrginp.m_noise_type = dmrgenv.noise_type
 *     dmrginp.m_ham_type = dmrgenv.ham_type
 *     dmrginp.m_nroots = dmrgenv.nroots             # <<<<<<<<<<<<<<
 *     dmrginp.m_solve_type = dmrgenv.solve_type
 *     dmrginp.m_do_fci = dmrgenv.do_fci
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nroots); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_nroots = __pyx_t_4;

  /* "_dmrg.pyx":646
 *     dmrginp.m_ham_type = dmrgenv.ham_type
 *     dmrginp.m_nroots = dmrgenv.nroots
 *     dmrginp.m_solve_type = dmrgenv.solve_type             # <<<<<<<<<<<<<<
 *     dmrginp.m_do_fci = dmrgenv.do_fci
 *     dmrginp.m_do_npdm_ops     = dmrgenv.do_npdm_ops
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_solve_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = ((enum SpinAdapted::solveTypes)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_solve_type = __pyx_t_12;

  /* "_dmrg.pyx":647
 *     dmrginp.m_nroots = dmrgenv.nroots
 *     dmrginp.m_solve_type = dmrgenv.solve_type
 *     dmrginp.m_do_fci = dmrgenv.do_fci             # <<<<<<<<<<<<<<
 *     dmrginp.m_do_npdm_ops     = dmrgenv.do_npdm_ops
 *     dmrginp.m_do_npdm_in_core = dmrgenv.do_npdm_in_core
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_fci); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_do_fci = __pyx_t_7;

  /* "_dmrg.pyx":648
 *     dmrginp.m_solve_type = dmrgenv.solve_type
 *     dmrginp.m_do_fci = dmrgenv.do_fci
 *     dmrginp.m_do_npdm_ops     = dmrgenv.do_npdm_ops             # <<<<<<<<<<<<<<
 *     dmrginp.m_do_npdm_in_core = dmrgenv.do_npdm_in_core
 *     dmrginp.m_new_npdm_code   = dmrgenv.new_npdm_code
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_npdm_ops); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_do_npdm_ops = __pyx_t_7;

  /* "_dmrg.pyx":649
 *     dmrginp.m_do_fci = dmrgenv.do_fci
 *     dmrginp.m_do_npdm_ops     = dmrgenv.do_npdm_ops
 *     dmrginp.m_do_npdm_in_core = dmrgenv.do_npdm_in_core             # <<<<<<<<<<<<<<
 *     dmrginp.m_new_npdm_code   = dmrgenv.new_npdm_code
 * #    dmrginp.m_set_Sz = dmrgenv.set_Sz
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_npdm_in_core); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_do_npdm_in_core = __pyx_t_7;

  /* "_dmrg.pyx":650
 *     dmrginp.m_do_npdm_ops     = dmrgenv.do_npdm_ops
 *     dmrginp.m_do_npdm_in_core = dmrgenv.do_npdm_in_core
 *     dmrginp.m_new_npdm_code   = dmrgenv.new_npdm_code             # <<<<<<<<<<<<<<
 * #    dmrginp.m_set_Sz = dmrgenv.set_Sz
 *     dmrginp.m_maxiter = dmrgenv.maxiter
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_new_npdm_code); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_new_npdm_code = __pyx_t_7;

  /* "_dmrg.pyx":652
 *     dmrginp.m_new_npdm_code   = dmrgenv.new_npdm_code
 * #    dmrginp.m_set_Sz = dmrgenv.set_Sz
 *     dmrginp.m_maxiter = dmrgenv.maxiter             # <<<<<<<<<<<<<<
 *     dmrginp.m_oneindex_screen_tol = dmrgenv.oneindex_screen_tol
 *     dmrginp.m_twoindex_screen_tol = dmrgenv.twoindex_screen_tol
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_maxiter); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_maxiter = __pyx_t_4;

  /* "_dmrg.pyx":653
 * #    dmrginp.m_set_Sz = dmrgenv.set_Sz
 *     dmrginp.m_maxiter = dmrgenv.maxiter
 *     dmrginp.m_oneindex_screen_tol = dmrgenv.oneindex_screen_tol             # <<<<<<<<<<<<<<
 *     dmrginp.m_twoindex_screen_tol = dmrgenv.twoindex_screen_tol
 * #    dmrginp.m_no_transform = dmrgenv.no_transform
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_oneindex_screen_tol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_oneindex_screen_tol = __pyx_t_13;

  /* "_dmrg.pyx":654
 *     dmrginp.m_maxiter = dmrgenv.maxiter
 *     dmrginp.m_oneindex_screen_tol = dmrgenv.oneindex_screen_tol
 *     dmrginp.m_twoindex_screen_tol = dmrgenv.twoindex_screen_tol             # <<<<<<<<<<<<<<
 * #    dmrginp.m_no_transform = dmrgenv.no_transform
 *     dmrginp.m_add_noninteracting_orbs = dmrgenv.add_noninteracting_orbs
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_twoindex_screen_tol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_twoindex_screen_tol = __pyx_t_13;

  /* "_dmrg.pyx":656
 *     dmrginp.m_twoindex_screen_tol = dmrgenv.twoindex_screen_tol
 * #    dmrginp.m_no_transform = dmrgenv.no_transform
 *     dmrginp.m_add_noninteracting_orbs = dmrgenv.add_noninteracting_orbs             # <<<<<<<<<<<<<<
 *     dmrginp.m_nquanta = dmrgenv.nquanta
 *     dmrginp.m_sys_add = dmrgenv.sys_add
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_add_noninteracting_orbs); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_add_noninteracting_orbs = __pyx_t_7;

  /* "_dmrg.pyx":657
 * #    dmrginp.m_no_transform = dmrgenv.no_transform
 *     dmrginp.m_add_noninteracting_orbs = dmrgenv.add_noninteracting_orbs
 *     dmrginp.m_nquanta = dmrgenv.nquanta             # <<<<<<<<<<<<<<
 *     dmrginp.m_sys_add = dmrgenv.sys_add
 *     #dmrginp.m_env_add =
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nquanta); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_nquanta = __pyx_t_4;

  /* "_dmrg.pyx":658
 *     dmrginp.m_add_noninteracting_orbs = dmrgenv.add_noninteracting_orbs
 *     dmrginp.m_nquanta = dmrgenv.nquanta
 *     dmrginp.m_sys_add = dmrgenv.sys_add             # <<<<<<<<<<<<<<
 *     #dmrginp.m_env_add =
 *     dmrginp.m_deflation_min_size = dmrgenv.deflation_min_size
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sys_add); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sys_add = __pyx_t_4;

  /* "_dmrg.pyx":660
 *     dmrginp.m_sys_add = dmrgenv.sys_add
 *     #dmrginp.m_env_add =
 *     dmrginp.m_deflation_min_size = dmrgenv.deflation_min_size             # <<<<<<<<<<<<<<
 *     dmrginp.m_deflation_max_size = dmrgenv.deflation_max_size
 *     dmrginp.m_algorithm_type = dmrgenv.algorithm_type
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_deflation_min_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_deflation_min_size = __pyx_t_4;

  /* "_dmrg.pyx":661
 *     #dmrginp.m_env_add =
 *     dmrginp.m_deflation_min_size = dmrgenv.deflation_min_size
 *     dmrginp.m_deflation_max_size = dmrgenv.deflation_max_size             # <<<<<<<<<<<<<<
 *     dmrginp.m_algorithm_type = dmrgenv.algorithm_type
 *     dmrginp.m_twodot_to_onedot_iter = dmrgenv.onedot_start_cycle
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_deflation_max_size); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_deflation_max_size = __pyx_t_4;

  /* "_dmrg.pyx":662
 *     dmrginp.m_deflation_min_size = dmrgenv.deflation_min_size
 *     dmrginp.m_deflation_max_size = dmrgenv.deflation_max_size
 *     dmrginp.m_algorithm_type = dmrgenv.algorithm_type             # <<<<<<<<<<<<<<
 *     dmrginp.m_twodot_to_onedot_iter = dmrgenv.onedot_start_cycle
 *     dmrginp.m_save_prefix = dmrgenv.scratch_prefix
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_algorithm_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = ((enum SpinAdapted::algorithmTypes)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_algorithm_type = __pyx_t_14;

  /* "_dmrg.pyx":663
 *     dmrginp.m_deflation_max_size = dmrgenv.deflation_max_size
 *     dmrginp.m_algorithm_type = dmrgenv.algorithm_type
 *     dmrginp.m_twodot_to_onedot_iter = dmrgenv.onedot_start_cycle             # <<<<<<<<<<<<<<
 *     dmrginp.m_save_prefix = dmrgenv.scratch_prefix
 *     dmrginp.m_load_prefix = dmrgenv.cratch_prefix
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_onedot_start_cycle); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_twodot_to_onedot_iter = __pyx_t_4;

  /* "_dmrg.pyx":664
 *     dmrginp.m_algorithm_type = dmrgenv.algorithm_type
 *     dmrginp.m_twodot_to_onedot_iter = dmrgenv.onedot_start_cycle
 *     dmrginp.m_save_prefix = dmrgenv.scratch_prefix             # <<<<<<<<<<<<<<
 *     dmrginp.m_load_prefix = dmrgenv.cratch_prefix
 *     dmrginp.m_direct = dmrgenv.direct
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_scratch_prefix); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_save_prefix = __pyx_t_6;

  /* "_dmrg.pyx":665
 *     dmrginp.m_twodot_to_onedot_iter = dmrgenv.onedot_start_cycle
 *     dmrginp.m_save_prefix = dmrgenv.scratch_prefix
 *     dmrginp.m_load_prefix = dmrgenv.cratch_prefix             # <<<<<<<<<<<<<<
 *     dmrginp.m_direct = dmrgenv.direct
 * #    dmrginp.m_orbenergies = dmrgenv.orbenergies
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_cratch_prefix); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_load_prefix = __pyx_t_6;

  /* "_dmrg.pyx":666
 *     dmrginp.m_save_prefix = dmrgenv.scratch_prefix
 *     dmrginp.m_load_prefix = dmrgenv.cratch_prefix
 *     dmrginp.m_direct = dmrgenv.direct             # <<<<<<<<<<<<<<
 * #    dmrginp.m_orbenergies = dmrgenv.orbenergies
 * #    dmrginp.m_maxj = dmrgenv.m_maxj
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_direct); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_direct = __pyx_t_7;

  /* "_dmrg.pyx":669
 * #    dmrginp.m_orbenergies = dmrgenv.orbenergies
 * #    dmrginp.m_maxj = dmrgenv.m_maxj
 *     dmrginp.m_max_lanczos_dimension = dmrgenv.max_lanczos_dimension             # <<<<<<<<<<<<<<
 *     dmrginp.m_sweep_tol = dmrgenv.sweep_tol
 *     #dmrginp.m_restart =
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_max_lanczos_dimension); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_max_lanczos_dimension = __pyx_t_4;

  /* "_dmrg.pyx":670
 * #    dmrginp.m_maxj = dmrgenv.m_maxj
 *     dmrginp.m_max_lanczos_dimension = dmrgenv.max_lanczos_dimension
 *     dmrginp.m_sweep_tol = dmrgenv.sweep_tol             # <<<<<<<<<<<<<<
 *     #dmrginp.m_restart =
 *     #dmrginp.m_fullrestart =
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_tol); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_sweep_tol = __pyx_t_13;

  /* "_dmrg.pyx":676
 *     #dmrginp.m_reset_iterations =
 * #    dmrginp.m_spin_vector = dmrgenv.spin_vector
 *     dmrginp.m_implicitTranspose = dmrgenv.implicitTranspose             # <<<<<<<<<<<<<<
 *     dmrginp.m_spin_orbs_symmetry = dmrgenv.spin_orbs_symmetry
 *     dmrginp.m_num_spatial_orbs = dmrgenv.tot_sites
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_implicitTranspose); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_implicitTranspose = __pyx_t_7;

  /* "_dmrg.pyx":677
 * #    dmrginp.m_spin_vector = dmrgenv.spin_vector
 *     dmrginp.m_implicitTranspose = dmrgenv.implicitTranspose
 *     dmrginp.m_spin_orbs_symmetry = dmrgenv.spin_orbs_symmetry             # <<<<<<<<<<<<<<
 *     dmrginp.m_num_spatial_orbs = dmrgenv.tot_sites
 *     dmrginp.m_spatial_to_spin = dmrgenv.spatial_to_spin
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin_orbs_symmetry); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_spin_orbs_symmetry = __pyx_t_5;

  /* "_dmrg.pyx":678
 *     dmrginp.m_implicitTranspose = dmrgenv.implicitTranspose
 *     dmrginp.m_spin_orbs_symmetry = dmrgenv.spin_orbs_symmetry
 *     dmrginp.m_num_spatial_orbs = dmrgenv.tot_sites             # <<<<<<<<<<<<<<
 *     dmrginp.m_spatial_to_spin = dmrgenv.spatial_to_spin
 *     dmrginp.m_spin_to_spatial = dmrgenv.spin_to_spatial
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_tot_sites); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_num_spatial_orbs = __pyx_t_4;

  /* "_dmrg.pyx":679
 *     dmrginp.m_spin_orbs_symmetry = dmrgenv.spin_orbs_symmetry
 *     dmrginp.m_num_spatial_orbs = dmrgenv.tot_sites
 *     dmrginp.m_spatial_to_spin = dmrgenv.spatial_to_spin             # <<<<<<<<<<<<<<
 *     dmrginp.m_spin_to_spatial = dmrgenv.spin_to_spatial
 *     dmrginp.m_outputlevel = dmrgenv.outputlevel
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spatial_to_spin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_spatial_to_spin = __pyx_t_5;

  /* "_dmrg.pyx":680
 *     dmrginp.m_num_spatial_orbs = dmrgenv.tot_sites
 *     dmrginp.m_spatial_to_spin = dmrgenv.spatial_to_spin
 *     dmrginp.m_spin_to_spatial = dmrgenv.spin_to_spatial             # <<<<<<<<<<<<<<
 *     dmrginp.m_outputlevel = dmrgenv.outputlevel
 *     dmrginp.m_core_energy = dmrgenv.core_energy
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin_to_spatial); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_spin_to_spatial = __pyx_t_5;

  /* "_dmrg.pyx":681
 *     dmrginp.m_spatial_to_spin = dmrgenv.spatial_to_spin
 *     dmrginp.m_spin_to_spatial = dmrgenv.spin_to_spatial
 *     dmrginp.m_outputlevel = dmrgenv.outputlevel             # <<<<<<<<<<<<<<
 *     dmrginp.m_core_energy = dmrgenv.core_energy
 *     dmrginp.m_orbformat   = dmrgenv.orbformat
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_outputlevel); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_outputlevel = __pyx_t_4;

  /* "_dmrg.pyx":682
 *     dmrginp.m_spin_to_spatial = dmrgenv.spin_to_spatial
 *     dmrginp.m_outputlevel = dmrgenv.outputlevel
 *     dmrginp.m_core_energy = dmrgenv.core_energy             # <<<<<<<<<<<<<<
 *     dmrginp.m_orbformat   = dmrgenv.orbformat
 *     dmrginp.m_reorderType = dmrgenv.reorderType
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_core_energy); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_core_energy = __pyx_t_13;

  /* "_dmrg.pyx":683
 *     dmrginp.m_outputlevel = dmrgenv.outputlevel
 *     dmrginp.m_core_energy = dmrgenv.core_energy
 *     dmrginp.m_orbformat   = dmrgenv.orbformat             # <<<<<<<<<<<<<<
 *     dmrginp.m_reorderType = dmrgenv.reorderType
 *     dmrginp.m_reorderfile = dmrgenv.reorderfile
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_orbformat); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_15 = ((enum SpinAdapted::orbitalFormat)PyInt_AsLong(__pyx_t_3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_orbformat = __pyx_t_15;

  /* "_dmrg.pyx":684
 *     dmrginp.m_core_energy = dmrgenv.core_energy
 *     dmrginp.m_orbformat   = dmrgenv.orbformat
 *     dmrginp.m_reorderType = dmrgenv.reorderType             # <<<<<<<<<<<<<<
 *     dmrginp.m_reorderfile = dmrgenv.reorderfile
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_reorderType); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_reorderType = __pyx_t_4;

  /* "_dmrg.pyx":685
 *     dmrginp.m_orbformat   = dmrgenv.orbformat
 *     dmrginp.m_reorderType = dmrgenv.reorderType
 *     dmrginp.m_reorderfile = dmrgenv.reorderfile             # <<<<<<<<<<<<<<
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_reorderfile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_reorderfile = __pyx_t_6;

  /* "_dmrg.pyx":686
 *     dmrginp.m_reorderType = dmrgenv.reorderType
 *     dmrginp.m_reorderfile = dmrgenv.reorderfile
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile             # <<<<<<<<<<<<<<
 * 
 * def Pysync_from_dmrginp(dmrgenv):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_gaconffile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  SpinAdapted::dmrginp.m_gaconffile = __pyx_t_6;

  /* "_dmrg.pyx":615
 * 
 * 
 * def Pysync2dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_dmrg.Pysync2dmrginp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_dmrg.pyx":688
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 * 
 * def Pysync_from_dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 */

/* Python wrapper */
static PyObject *__pyx_pw_5_dmrg_21Pysync_from_dmrginp(PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv); /*proto*/
static PyMethodDef __pyx_mdef_5_dmrg_21Pysync_from_dmrginp = {__Pyx_NAMESTR("Pysync_from_dmrginp"), (PyCFunction)__pyx_pw_5_dmrg_21Pysync_from_dmrginp, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_5_dmrg_21Pysync_from_dmrginp(PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pysync_from_dmrginp (wrapper)", 0);
  __pyx_r = __pyx_pf_5_dmrg_20Pysync_from_dmrginp(__pyx_self, ((PyObject *)__pyx_v_dmrgenv));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5_dmrg_20Pysync_from_dmrginp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dmrgenv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pysync_from_dmrginp", 0);

  /* "_dmrg.pyx":689
 * 
 * def Pysync_from_dmrginp(dmrgenv):
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta             # <<<<<<<<<<<<<<
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 *     dmrgenv.spinAdapted = dmrginp.m_spinAdapted
 */
  __pyx_t_1 = __Pyx_PyInt_From_int((SpinAdapted::dmrginp.m_alpha + SpinAdapted::dmrginp.m_beta)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nelec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":690
 * def Pysync_from_dmrginp(dmrgenv):
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta             # <<<<<<<<<<<<<<
 *     dmrgenv.spinAdapted = dmrginp.m_spinAdapted
 *     dmrgenv.hf_occupancy = dmrginp.m_hf_occupancy
 */
  __pyx_t_1 = __Pyx_PyInt_From_int((SpinAdapted::dmrginp.m_alpha - SpinAdapted::dmrginp.m_beta)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":691
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 *     dmrgenv.spinAdapted = dmrginp.m_spinAdapted             # <<<<<<<<<<<<<<
 *     dmrgenv.hf_occupancy = dmrginp.m_hf_occupancy
 *     dmrgenv.hf_occ_user = dmrginp.m_hf_occ_user
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_spinAdapted); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spinAdapted, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":692
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 *     dmrgenv.spinAdapted = dmrginp.m_spinAdapted
 *     dmrgenv.hf_occupancy = dmrginp.m_hf_occupancy             # <<<<<<<<<<<<<<
 *     dmrgenv.hf_occ_user = dmrginp.m_hf_occ_user
 *     dmrgenv.weights = dmrginp.m_weights
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_hf_occupancy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_hf_occupancy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":693
 *     dmrgenv.spinAdapted = dmrginp.m_spinAdapted
 *     dmrgenv.hf_occupancy = dmrginp.m_hf_occupancy
 *     dmrgenv.hf_occ_user = dmrginp.m_hf_occ_user             # <<<<<<<<<<<<<<
 *     dmrgenv.weights = dmrginp.m_weights
 *     dmrgenv.Bogoliubov = dmrginp.m_Bogoliubov
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(SpinAdapted::dmrginp.m_hf_occ_user); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_hf_occ_user, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":694
 *     dmrgenv.hf_occupancy = dmrginp.m_hf_occupancy
 *     dmrgenv.hf_occ_user = dmrginp.m_hf_occ_user
 *     dmrgenv.weights = dmrginp.m_weights             # <<<<<<<<<<<<<<
 *     dmrgenv.Bogoliubov = dmrginp.m_Bogoliubov
 *     dmrgenv.sweep_iter_schedule = dmrginp.m_sweep_iter_schedule
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_double(SpinAdapted::dmrginp.m_weights); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_weights, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":695
 *     dmrgenv.hf_occ_user = dmrginp.m_hf_occ_user
 *     dmrgenv.weights = dmrginp.m_weights
 *     dmrgenv.Bogoliubov = dmrginp.m_Bogoliubov             # <<<<<<<<<<<<<<
 *     dmrgenv.sweep_iter_schedule = dmrginp.m_sweep_iter_schedule
 *     dmrgenv.sweep_state_schedule = dmrginp.m_sweep_state_schedule
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_Bogoliubov); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_Bogoliubov, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":696
 *     dmrgenv.weights = dmrginp.m_weights
 *     dmrgenv.Bogoliubov = dmrginp.m_Bogoliubov
 *     dmrgenv.sweep_iter_schedule = dmrginp.m_sweep_iter_schedule             # <<<<<<<<<<<<<<
 *     dmrgenv.sweep_state_schedule = dmrginp.m_sweep_state_schedule
 *     dmrgenv.davidson_tol_schedule = dmrginp.m_sweep_tol_schedule
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_sweep_iter_schedule); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_iter_schedule, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":697
 *     dmrgenv.Bogoliubov = dmrginp.m_Bogoliubov
 *     dmrgenv.sweep_iter_schedule = dmrginp.m_sweep_iter_schedule
 *     dmrgenv.sweep_state_schedule = dmrginp.m_sweep_state_schedule             # <<<<<<<<<<<<<<
 *     dmrgenv.davidson_tol_schedule = dmrginp.m_sweep_tol_schedule
 *     dmrgenv.noise_schedule = dmrginp.m_sweep_noise_schedule
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_sweep_state_schedule); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_state_schedule, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":698
 *     dmrgenv.sweep_iter_schedule = dmrginp.m_sweep_iter_schedule
 *     dmrgenv.sweep_state_schedule = dmrginp.m_sweep_state_schedule
 *     dmrgenv.davidson_tol_schedule = dmrginp.m_sweep_tol_schedule             # <<<<<<<<<<<<<<
 *     dmrgenv.noise_schedule = dmrginp.m_sweep_noise_schedule
 *     dmrgenv.maxM = dmrginp.m_maxM
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_double(SpinAdapted::dmrginp.m_sweep_tol_schedule); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_davidson_tol_schedule, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":699
 *     dmrgenv.sweep_state_schedule = dmrginp.m_sweep_state_schedule
 *     dmrgenv.davidson_tol_schedule = dmrginp.m_sweep_tol_schedule
 *     dmrgenv.noise_schedule = dmrginp.m_sweep_noise_schedule             # <<<<<<<<<<<<<<
 *     dmrgenv.maxM = dmrginp.m_maxM
 *     dmrgenv.lastM = dmrginp.m_lastM
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_double(SpinAdapted::dmrginp.m_sweep_noise_schedule); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_noise_schedule, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":700
 *     dmrgenv.davidson_tol_schedule = dmrginp.m_sweep_tol_schedule
 *     dmrgenv.noise_schedule = dmrginp.m_sweep_noise_schedule
 *     dmrgenv.maxM = dmrginp.m_maxM             # <<<<<<<<<<<<<<
 *     dmrgenv.lastM = dmrginp.m_lastM
 *     dmrgenv.startM = dmrginp.m_startM
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_maxM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_maxM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":701
 *     dmrgenv.noise_schedule = dmrginp.m_sweep_noise_schedule
 *     dmrgenv.maxM = dmrginp.m_maxM
 *     dmrgenv.lastM = dmrginp.m_lastM             # <<<<<<<<<<<<<<
 *     dmrgenv.startM = dmrginp.m_startM
 * #    dmrgenv.integral_disk_storage_thresh = dmrginp.m_integral_disk_storage_thresh
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_lastM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_lastM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":702
 *     dmrgenv.maxM = dmrginp.m_maxM
 *     dmrgenv.lastM = dmrginp.m_lastM
 *     dmrgenv.startM = dmrginp.m_startM             # <<<<<<<<<<<<<<
 * #    dmrgenv.integral_disk_storage_thresh = dmrginp.m_integral_disk_storage_thresh
 * #    dmrgenv.do_diis = dmrginp.m_do_diis
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_startM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_startM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":709
 * #    dmrgenv.diis_keep_states = dmrginp.m_diis_keep_states
 * #    dmrgenv.diis_error_tol = dmrginp.m_diis_error_tol
 *     dmrgenv.calc_type = dmrginp.m_calc_type             # <<<<<<<<<<<<<<
 *     dmrgenv.noise_type = dmrginp.m_noise_type
 *     dmrgenv.ham_type = dmrginp.m_ham_type
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_calc_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_calc_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":710
 * #    dmrgenv.diis_error_tol = dmrginp.m_diis_error_tol
 *     dmrgenv.calc_type = dmrginp.m_calc_type
 *     dmrgenv.noise_type = dmrginp.m_noise_type             # <<<<<<<<<<<<<<
 *     dmrgenv.ham_type = dmrginp.m_ham_type
 *     dmrgenv.nroots = dmrginp.m_nroots
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_noise_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_noise_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":711
 *     dmrgenv.calc_type = dmrginp.m_calc_type
 *     dmrgenv.noise_type = dmrginp.m_noise_type
 *     dmrgenv.ham_type = dmrginp.m_ham_type             # <<<<<<<<<<<<<<
 *     dmrgenv.nroots = dmrginp.m_nroots
 *     dmrgenv.solve_type = dmrginp.m_solve_type
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_ham_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_ham_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":712
 *     dmrgenv.noise_type = dmrginp.m_noise_type
 *     dmrgenv.ham_type = dmrginp.m_ham_type
 *     dmrgenv.nroots = dmrginp.m_nroots             # <<<<<<<<<<<<<<
 *     dmrgenv.solve_type = dmrginp.m_solve_type
 *     dmrgenv.do_fci = dmrginp.m_do_fci
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_nroots); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nroots, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":713
 *     dmrgenv.ham_type = dmrginp.m_ham_type
 *     dmrgenv.nroots = dmrginp.m_nroots
 *     dmrgenv.solve_type = dmrginp.m_solve_type             # <<<<<<<<<<<<<<
 *     dmrgenv.do_fci = dmrginp.m_do_fci
 *     dmrgenv.do_npdm_ops     = dmrginp.m_do_npdm_ops
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_solve_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_solve_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":714
 *     dmrgenv.nroots = dmrginp.m_nroots
 *     dmrgenv.solve_type = dmrginp.m_solve_type
 *     dmrgenv.do_fci = dmrginp.m_do_fci             # <<<<<<<<<<<<<<
 *     dmrgenv.do_npdm_ops     = dmrginp.m_do_npdm_ops
 *     dmrgenv.do_npdm_in_core = dmrginp.m_do_npdm_in_core
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_do_fci); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_fci, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":715
 *     dmrgenv.solve_type = dmrginp.m_solve_type
 *     dmrgenv.do_fci = dmrginp.m_do_fci
 *     dmrgenv.do_npdm_ops     = dmrginp.m_do_npdm_ops             # <<<<<<<<<<<<<<
 *     dmrgenv.do_npdm_in_core = dmrginp.m_do_npdm_in_core
 *     dmrgenv.new_npdm_code   = dmrginp.m_new_npdm_code
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_do_npdm_ops); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_npdm_ops, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":716
 *     dmrgenv.do_fci = dmrginp.m_do_fci
 *     dmrgenv.do_npdm_ops     = dmrginp.m_do_npdm_ops
 *     dmrgenv.do_npdm_in_core = dmrginp.m_do_npdm_in_core             # <<<<<<<<<<<<<<
 *     dmrgenv.new_npdm_code   = dmrginp.m_new_npdm_code
 * #    dmrgenv.set_Sz = dmrginp.m_set_Sz
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_do_npdm_in_core); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_do_npdm_in_core, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":717
 *     dmrgenv.do_npdm_ops     = dmrginp.m_do_npdm_ops
 *     dmrgenv.do_npdm_in_core = dmrginp.m_do_npdm_in_core
 *     dmrgenv.new_npdm_code   = dmrginp.m_new_npdm_code             # <<<<<<<<<<<<<<
 * #    dmrgenv.set_Sz = dmrginp.m_set_Sz
 *     dmrgenv.maxiter = dmrginp.m_maxiter
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_new_npdm_code); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_new_npdm_code, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":719
 *     dmrgenv.new_npdm_code   = dmrginp.m_new_npdm_code
 * #    dmrgenv.set_Sz = dmrginp.m_set_Sz
 *     dmrgenv.maxiter = dmrginp.m_maxiter             # <<<<<<<<<<<<<<
 *     dmrgenv.oneindex_screen_tol = dmrginp.m_oneindex_screen_tol
 *     dmrgenv.twoindex_screen_tol = dmrginp.m_twoindex_screen_tol
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_maxiter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_maxiter, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":720
 * #    dmrgenv.set_Sz = dmrginp.m_set_Sz
 *     dmrgenv.maxiter = dmrginp.m_maxiter
 *     dmrgenv.oneindex_screen_tol = dmrginp.m_oneindex_screen_tol             # <<<<<<<<<<<<<<
 *     dmrgenv.twoindex_screen_tol = dmrginp.m_twoindex_screen_tol
 * #    dmrgenv.no_transform = dmrginp.m_no_transform
 */
  __pyx_t_1 = PyFloat_FromDouble(SpinAdapted::dmrginp.m_oneindex_screen_tol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_oneindex_screen_tol, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":721
 *     dmrgenv.maxiter = dmrginp.m_maxiter
 *     dmrgenv.oneindex_screen_tol = dmrginp.m_oneindex_screen_tol
 *     dmrgenv.twoindex_screen_tol = dmrginp.m_twoindex_screen_tol             # <<<<<<<<<<<<<<
 * #    dmrgenv.no_transform = dmrginp.m_no_transform
 *     dmrgenv.add_noninteracting_orbs = dmrginp.m_add_noninteracting_orbs
 */
  __pyx_t_1 = PyFloat_FromDouble(SpinAdapted::dmrginp.m_twoindex_screen_tol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_twoindex_screen_tol, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":723
 *     dmrgenv.twoindex_screen_tol = dmrginp.m_twoindex_screen_tol
 * #    dmrgenv.no_transform = dmrginp.m_no_transform
 *     dmrgenv.add_noninteracting_orbs = dmrginp.m_add_noninteracting_orbs             # <<<<<<<<<<<<<<
 *     dmrgenv.nquanta = dmrginp.m_nquanta
 *     dmrgenv.deflation_min_size = dmrginp.m_deflation_min_size
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_add_noninteracting_orbs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_add_noninteracting_orbs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":724
 * #    dmrgenv.no_transform = dmrginp.m_no_transform
 *     dmrgenv.add_noninteracting_orbs = dmrginp.m_add_noninteracting_orbs
 *     dmrgenv.nquanta = dmrginp.m_nquanta             # <<<<<<<<<<<<<<
 *     dmrgenv.deflation_min_size = dmrginp.m_deflation_min_size
 *     dmrgenv.deflation_max_size = dmrginp.m_deflation_max_size
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_nquanta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_nquanta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":725
 *     dmrgenv.add_noninteracting_orbs = dmrginp.m_add_noninteracting_orbs
 *     dmrgenv.nquanta = dmrginp.m_nquanta
 *     dmrgenv.deflation_min_size = dmrginp.m_deflation_min_size             # <<<<<<<<<<<<<<
 *     dmrgenv.deflation_max_size = dmrginp.m_deflation_max_size
 *     dmrgenv.algorithm_type = dmrginp.m_algorithm_type
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_deflation_min_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_deflation_min_size, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":726
 *     dmrgenv.nquanta = dmrginp.m_nquanta
 *     dmrgenv.deflation_min_size = dmrginp.m_deflation_min_size
 *     dmrgenv.deflation_max_size = dmrginp.m_deflation_max_size             # <<<<<<<<<<<<<<
 *     dmrgenv.algorithm_type = dmrginp.m_algorithm_type
 *     dmrgenv.onedot_start_cycle = dmrginp.m_twodot_to_onedot_iter
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_deflation_max_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_deflation_max_size, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":727
 *     dmrgenv.deflation_min_size = dmrginp.m_deflation_min_size
 *     dmrgenv.deflation_max_size = dmrginp.m_deflation_max_size
 *     dmrgenv.algorithm_type = dmrginp.m_algorithm_type             # <<<<<<<<<<<<<<
 *     dmrgenv.onedot_start_cycle = dmrginp.m_twodot_to_onedot_iter
 *     dmrgenv.scratch_prefix = dmrginp.m_save_prefix
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_algorithm_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_algorithm_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":728
 *     dmrgenv.deflation_max_size = dmrginp.m_deflation_max_size
 *     dmrgenv.algorithm_type = dmrginp.m_algorithm_type
 *     dmrgenv.onedot_start_cycle = dmrginp.m_twodot_to_onedot_iter             # <<<<<<<<<<<<<<
 *     dmrgenv.scratch_prefix = dmrginp.m_save_prefix
 *     #dmrgenv.load_prefix = dmrginp.m_load_prefix
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_twodot_to_onedot_iter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_onedot_start_cycle, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 728; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":729
 *     dmrgenv.algorithm_type = dmrginp.m_algorithm_type
 *     dmrgenv.onedot_start_cycle = dmrginp.m_twodot_to_onedot_iter
 *     dmrgenv.scratch_prefix = dmrginp.m_save_prefix             # <<<<<<<<<<<<<<
 *     #dmrgenv.load_prefix = dmrginp.m_load_prefix
 *     dmrgenv.direct = dmrginp.m_direct
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(SpinAdapted::dmrginp.m_save_prefix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_scratch_prefix, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":731
 *     dmrgenv.scratch_prefix = dmrginp.m_save_prefix
 *     #dmrgenv.load_prefix = dmrginp.m_load_prefix
 *     dmrgenv.direct = dmrginp.m_direct             # <<<<<<<<<<<<<<
 * #    dmrgenv.orbenergies = dmrginp.m_orbenergies
 * #    dmrgenv.m_maxj = dmrginp.m_maxj
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(SpinAdapted::dmrginp.m_direct); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_direct, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":734
 * #    dmrgenv.orbenergies = dmrginp.m_orbenergies
 * #    dmrgenv.m_maxj = dmrginp.m_maxj
 *     dmrgenv.max_lanczos_dimension = dmrginp.m_max_lanczos_dimension             # <<<<<<<<<<<<<<
 *     dmrgenv.sweep_tol = dmrginp.m_sweep_tol
 * #    dmrgenv.spin_vector = dmrginp.m_spin_vector
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_max_lanczos_dimension); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_max_lanczos_dimension, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":735
 * #    dmrgenv.m_maxj = dmrginp.m_maxj
 *     dmrgenv.max_lanczos_dimension = dmrginp.m_max_lanczos_dimension
 *     dmrgenv.sweep_tol = dmrginp.m_sweep_tol             # <<<<<<<<<<<<<<
 * #    dmrgenv.spin_vector = dmrginp.m_spin_vector
 *     dmrgenv.spin_orbs_symmetry = dmrginp.m_spin_orbs_symmetry
 */
  __pyx_t_1 = PyFloat_FromDouble(SpinAdapted::dmrginp.m_sweep_tol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_sweep_tol, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":737
 *     dmrgenv.sweep_tol = dmrginp.m_sweep_tol
 * #    dmrgenv.spin_vector = dmrginp.m_spin_vector
 *     dmrgenv.spin_orbs_symmetry = dmrginp.m_spin_orbs_symmetry             # <<<<<<<<<<<<<<
 *     dmrgenv.tot_sites = dmrginp.m_num_spatial_orbs
 *     dmrgenv.spatial_to_spin = dmrginp.m_spatial_to_spin
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_spin_orbs_symmetry); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin_orbs_symmetry, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":738
 * #    dmrgenv.spin_vector = dmrginp.m_spin_vector
 *     dmrgenv.spin_orbs_symmetry = dmrginp.m_spin_orbs_symmetry
 *     dmrgenv.tot_sites = dmrginp.m_num_spatial_orbs             # <<<<<<<<<<<<<<
 *     dmrgenv.spatial_to_spin = dmrginp.m_spatial_to_spin
 *     dmrgenv.spin_to_spatial = dmrginp.m_spin_to_spatial
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_num_spatial_orbs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_tot_sites, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":739
 *     dmrgenv.spin_orbs_symmetry = dmrginp.m_spin_orbs_symmetry
 *     dmrgenv.tot_sites = dmrginp.m_num_spatial_orbs
 *     dmrgenv.spatial_to_spin = dmrginp.m_spatial_to_spin             # <<<<<<<<<<<<<<
 *     dmrgenv.spin_to_spatial = dmrginp.m_spin_to_spatial
 *     dmrgenv.outputlevel = dmrginp.m_outputlevel
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_spatial_to_spin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spatial_to_spin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":740
 *     dmrgenv.tot_sites = dmrginp.m_num_spatial_orbs
 *     dmrgenv.spatial_to_spin = dmrginp.m_spatial_to_spin
 *     dmrgenv.spin_to_spatial = dmrginp.m_spin_to_spatial             # <<<<<<<<<<<<<<
 *     dmrgenv.outputlevel = dmrginp.m_outputlevel
 *     dmrgenv.core_energy = dmrginp.m_core_energy
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_spin_to_spatial); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_spin_to_spatial, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":741
 *     dmrgenv.spatial_to_spin = dmrginp.m_spatial_to_spin
 *     dmrgenv.spin_to_spatial = dmrginp.m_spin_to_spatial
 *     dmrgenv.outputlevel = dmrginp.m_outputlevel             # <<<<<<<<<<<<<<
 *     dmrgenv.core_energy = dmrginp.m_core_energy
 *     dmrgenv.orbformat = dmrginp.m_orbformat
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_outputlevel); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_outputlevel, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":742
 *     dmrgenv.spin_to_spatial = dmrginp.m_spin_to_spatial
 *     dmrgenv.outputlevel = dmrginp.m_outputlevel
 *     dmrgenv.core_energy = dmrginp.m_core_energy             # <<<<<<<<<<<<<<
 *     dmrgenv.orbformat = dmrginp.m_orbformat
 *     dmrgenv.reorderType = dmrginp.m_reorderType
 */
  __pyx_t_1 = PyFloat_FromDouble(SpinAdapted::dmrginp.m_core_energy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_core_energy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":743
 *     dmrgenv.outputlevel = dmrginp.m_outputlevel
 *     dmrgenv.core_energy = dmrginp.m_core_energy
 *     dmrgenv.orbformat = dmrginp.m_orbformat             # <<<<<<<<<<<<<<
 *     dmrgenv.reorderType = dmrginp.m_reorderType
 *     dmrgenv.reorder = dmrginp.m_reorder
 */
  __pyx_t_1 = PyInt_FromLong(SpinAdapted::dmrginp.m_orbformat); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_orbformat, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":744
 *     dmrgenv.core_energy = dmrginp.m_core_energy
 *     dmrgenv.orbformat = dmrginp.m_orbformat
 *     dmrgenv.reorderType = dmrginp.m_reorderType             # <<<<<<<<<<<<<<
 *     dmrgenv.reorder = dmrginp.m_reorder
 *     dmrgenv.reorderfile = dmrginp.m_reorderfile
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(SpinAdapted::dmrginp.m_reorderType); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_reorderType, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":745
 *     dmrgenv.orbformat = dmrginp.m_orbformat
 *     dmrgenv.reorderType = dmrginp.m_reorderType
 *     dmrgenv.reorder = dmrginp.m_reorder             # <<<<<<<<<<<<<<
 *     dmrgenv.reorderfile = dmrginp.m_reorderfile
 *     dmrgenv.gaconffile = dmrginp.m_gaconffile
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_int(SpinAdapted::dmrginp.m_reorder); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_reorder, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":746
 *     dmrgenv.reorderType = dmrginp.m_reorderType
 *     dmrgenv.reorder = dmrginp.m_reorder
 *     dmrgenv.reorderfile = dmrginp.m_reorderfile             # <<<<<<<<<<<<<<
 *     dmrgenv.gaconffile = dmrginp.m_gaconffile
 * 
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(SpinAdapted::dmrginp.m_reorderfile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_reorderfile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":747
 *     dmrgenv.reorder = dmrginp.m_reorder
 *     dmrgenv.reorderfile = dmrginp.m_reorderfile
 *     dmrgenv.gaconffile = dmrginp.m_gaconffile             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_t_1 = __pyx_convert_string_to_py_(SpinAdapted::dmrginp.m_gaconffile); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_dmrgenv, __pyx_n_s_gaconffile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":688
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 * 
 * def Pysync_from_dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_dmrg.Pysync_from_dmrginp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_6) {
      __pyx_t_7 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_6) {
        __pyx_t_8 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int> __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int> __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int> &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double> __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double> __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double> __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (PyList_CheckExact(__pyx_v_o) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_3 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_3 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double> &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5_dmrg_RawSpinQuantum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawSpinQuantum(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5_dmrg_14RawSpinQuantum_particleNumber(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_14RawSpinQuantum_14particleNumber_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_14RawSpinQuantum_totalSpin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_14RawSpinQuantum_9totalSpin_1__get__(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawSpinQuantum[] = {
  {__Pyx_NAMESTR("irrep"), (PyCFunction)__pyx_pw_5_dmrg_14RawSpinQuantum_1irrep, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5_dmrg_RawSpinQuantum[] = {
  {(char *)"particleNumber", __pyx_getprop_5_dmrg_14RawSpinQuantum_particleNumber, 0, 0, 0},
  {(char *)"totalSpin", __pyx_getprop_5_dmrg_14RawSpinQuantum_totalSpin, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawSpinQuantum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawSpinQuantum"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawSpinQuantum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawSpinQuantum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawSpinQuantum, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5_dmrg_RawSpinQuantum, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawSpinQuantum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_NewRawSpinQuantum(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5_dmrg_RawSpinQuantum(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5_dmrg_17NewRawSpinQuantum_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_NewRawSpinQuantum(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5_dmrg_17NewRawSpinQuantum_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5_dmrg_RawSpinQuantum(o);
}

static PyMethodDef __pyx_methods_5_dmrg_NewRawSpinQuantum[] = {
  {__Pyx_NAMESTR("init"), (PyCFunction)__pyx_pw_5_dmrg_17NewRawSpinQuantum_5init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_NewRawSpinQuantum = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.NewRawSpinQuantum"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_NewRawSpinQuantum), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_NewRawSpinQuantum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_NewRawSpinQuantum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_NewRawSpinQuantum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawStateInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawStateInfo(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_totalStates(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_11totalStates_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_quantaStates(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_12quantaStates_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_newQuantaMap(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_12newQuantaMap_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_leftUnMapQuanta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_15leftUnMapQuanta_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_rightUnMapQuanta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_16rightUnMapQuanta_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_leftStateInfo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_13leftStateInfo_1__get__(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawStateInfo_rightStateInfo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawStateInfo_14rightStateInfo_1__get__(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawStateInfo[] = {
  {__Pyx_NAMESTR("get_quanta"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_1get_quanta, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_quantaMap"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_3get_quantaMap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_allowedQuanta"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_5get_allowedQuanta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_whole_allowedQuanta"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_7get_whole_allowedQuanta, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_9save, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5_dmrg_12RawStateInfo_11load, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5_dmrg_RawStateInfo[] = {
  {(char *)"totalStates", __pyx_getprop_5_dmrg_12RawStateInfo_totalStates, 0, 0, 0},
  {(char *)"quantaStates", __pyx_getprop_5_dmrg_12RawStateInfo_quantaStates, 0, 0, 0},
  {(char *)"newQuantaMap", __pyx_getprop_5_dmrg_12RawStateInfo_newQuantaMap, 0, 0, 0},
  {(char *)"leftUnMapQuanta", __pyx_getprop_5_dmrg_12RawStateInfo_leftUnMapQuanta, 0, 0, 0},
  {(char *)"rightUnMapQuanta", __pyx_getprop_5_dmrg_12RawStateInfo_rightUnMapQuanta, 0, 0, 0},
  {(char *)"leftStateInfo", __pyx_getprop_5_dmrg_12RawStateInfo_leftStateInfo, 0, 0, 0},
  {(char *)"rightStateInfo", __pyx_getprop_5_dmrg_12RawStateInfo_rightStateInfo, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawStateInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawStateInfo"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawStateInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawStateInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawStateInfo, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5_dmrg_RawStateInfo, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawStateInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_NewRawStateInfo(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5_dmrg_RawStateInfo(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5_dmrg_15NewRawStateInfo_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_NewRawStateInfo(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5_dmrg_15NewRawStateInfo_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5_dmrg_RawStateInfo(o);
}

static PyMethodDef __pyx_methods_5_dmrg_NewRawStateInfo[] = {
  {__Pyx_NAMESTR("init_by_a_spinquantum"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawStateInfo_5init_by_a_spinquantum, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_unCollectedStateInfo"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawStateInfo_7set_unCollectedStateInfo, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_NewRawStateInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.NewRawStateInfo"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_NewRawStateInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_NewRawStateInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_NewRawStateInfo, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_NewRawStateInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawSpinBlock(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawSpinBlock(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5_dmrg_12RawSpinBlock_sites(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5_dmrg_12RawSpinBlock_5sites_1__get__(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawSpinBlock[] = {
  {__Pyx_NAMESTR("get_braStateInfo"), (PyCFunction)__pyx_pw_5_dmrg_12RawSpinBlock_1get_braStateInfo, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_ketStateInfo"), (PyCFunction)__pyx_pw_5_dmrg_12RawSpinBlock_3get_ketStateInfo, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_stateInfo"), (PyCFunction)__pyx_pw_5_dmrg_12RawSpinBlock_5get_stateInfo, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("printOperatorSummary"), (PyCFunction)__pyx_pw_5_dmrg_12RawSpinBlock_7printOperatorSummary, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pw_5_dmrg_12RawSpinBlock_9save, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5_dmrg_RawSpinBlock[] = {
  {(char *)"sites", __pyx_getprop_5_dmrg_12RawSpinBlock_sites, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawSpinBlock = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawSpinBlock"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawSpinBlock), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawSpinBlock, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawSpinBlock, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5_dmrg_RawSpinBlock, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawSpinBlock, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_NewRawSpinBlock(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5_dmrg_RawSpinBlock(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5_dmrg_15NewRawSpinBlock_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_NewRawSpinBlock(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5_dmrg_15NewRawSpinBlock_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5_dmrg_RawSpinBlock(o);
}

static PyMethodDef __pyx_methods_5_dmrg_NewRawSpinBlock[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_5load, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("init_by_dot_id"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_7init_by_dot_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("init_by_stateinfo"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_9init_by_stateinfo, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("BuildTensorProductBlock"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_11BuildTensorProductBlock, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("default_op_components"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_13default_op_components, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("default_op_components_compl"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_15default_op_components_compl, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_complementary_sites"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_17set_complementary_sites, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_twoInt"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_19set_twoInt, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("build_ops"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_21build_ops, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("addAdditionalCompOps"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_23addAdditionalCompOps, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_big_components"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_25set_big_components, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("transform_operators"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_27transform_operators, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("sync"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_29sync, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_loopblock"), (PyCFunction)__pyx_pw_5_dmrg_15NewRawSpinBlock_31set_loopblock, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_NewRawSpinBlock = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.NewRawSpinBlock"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_NewRawSpinBlock), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_NewRawSpinBlock, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_NewRawSpinBlock, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_NewRawSpinBlock, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawSparseMatrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawSparseMatrix(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawSparseMatrix[] = {
  {__Pyx_NAMESTR("get_orbs"), (PyCFunction)__pyx_pw_5_dmrg_15RawSparseMatrix_1get_orbs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_sign"), (PyCFunction)__pyx_pw_5_dmrg_15RawSparseMatrix_3get_sign, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_fermion"), (PyCFunction)__pyx_pw_5_dmrg_15RawSparseMatrix_5get_fermion, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("allowed"), (PyCFunction)__pyx_pw_5_dmrg_15RawSparseMatrix_7allowed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_shape"), (PyCFunction)__pyx_pw_5_dmrg_15RawSparseMatrix_9get_shape, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawSparseMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawSparseMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawSparseMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawSparseMatrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawSparseMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawSparseMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawWavefunction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawWavefunction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawWavefunction[] = {
  {__Pyx_NAMESTR("get_deltaQuantum"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_1get_deltaQuantum, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_onedot"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_3get_onedot, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_orbs"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_5get_orbs, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_sign"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_7get_sign, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_fermion"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_9get_fermion, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("allowed"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_11allowed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_shape"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_13get_shape, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pw_5_dmrg_15RawWavefunction_15save, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawWavefunction = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawWavefunction"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawWavefunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawWavefunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawWavefunction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawWavefunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_NewRawWavefunction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5_dmrg_RawWavefunction(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5_dmrg_18NewRawWavefunction_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_NewRawWavefunction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5_dmrg_18NewRawWavefunction_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5_dmrg_RawWavefunction(o);
}

static PyMethodDef __pyx_methods_5_dmrg_NewRawWavefunction[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5_dmrg_18NewRawWavefunction_5load, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_NewRawWavefunction = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.NewRawWavefunction"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_NewRawWavefunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_NewRawWavefunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_NewRawWavefunction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_NewRawWavefunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawMatrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawMatrix(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawMatrix[] = {
  {__Pyx_NAMESTR("get_shape"), (PyCFunction)__pyx_pw_5_dmrg_9RawMatrix_1get_shape, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawMatrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_RawRotationMatrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_RawRotationMatrix(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5_dmrg_RawRotationMatrix[] = {
  {__Pyx_NAMESTR("get_matrix_by_quanta_id"), (PyCFunction)__pyx_pw_5_dmrg_17RawRotationMatrix_1get_matrix_by_quanta_id, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("get_size"), (PyCFunction)__pyx_pw_5_dmrg_17RawRotationMatrix_3get_size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pw_5_dmrg_17RawRotationMatrix_5save, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_RawRotationMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.RawRotationMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_RawRotationMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_RawRotationMatrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_RawRotationMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_RawRotationMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5_dmrg_NewRawRotationMatrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5_dmrg_RawRotationMatrix(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5_dmrg_20NewRawRotationMatrix_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5_dmrg_NewRawRotationMatrix(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_5_dmrg_20NewRawRotationMatrix_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_5_dmrg_RawRotationMatrix(o);
}

static PyMethodDef __pyx_methods_5_dmrg_NewRawRotationMatrix[] = {
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_5_dmrg_20NewRawRotationMatrix_5load, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5_dmrg_NewRawRotationMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_dmrg.NewRawRotationMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_5_dmrg_NewRawRotationMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5_dmrg_NewRawRotationMatrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5_dmrg_NewRawRotationMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5_dmrg_NewRawRotationMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("_dmrg"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Bogoliubov, __pyx_k_Bogoliubov, sizeof(__pyx_k_Bogoliubov), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_PyBuildSlaterBlock_with_stateinf, __pyx_k_PyBuildSlaterBlock_with_stateinf, sizeof(__pyx_k_PyBuildSlaterBlock_with_stateinf), 0, 0, 1, 1},
  {&__pyx_n_s_PyTensorProduct, __pyx_k_PyTensorProduct, sizeof(__pyx_k_PyTensorProduct), 0, 0, 1, 1},
  {&__pyx_n_s_Pyget_last_site_id, __pyx_k_Pyget_last_site_id, sizeof(__pyx_k_Pyget_last_site_id), 0, 0, 1, 1},
  {&__pyx_n_s_Pyguess_rotmat, __pyx_k_Pyguess_rotmat, sizeof(__pyx_k_Pyguess_rotmat), 0, 0, 1, 1},
  {&__pyx_n_s_Pyinitialize_defaults, __pyx_k_Pyinitialize_defaults, sizeof(__pyx_k_Pyinitialize_defaults), 0, 0, 1, 1},
  {&__pyx_n_s_Pyonedot_shufflesysdot, __pyx_k_Pyonedot_shufflesysdot, sizeof(__pyx_k_Pyonedot_shufflesysdot), 0, 0, 1, 1},
  {&__pyx_n_s_Pysolve_wavefunction, __pyx_k_Pysolve_wavefunction, sizeof(__pyx_k_Pysolve_wavefunction), 0, 0, 1, 1},
  {&__pyx_n_s_Pysync2dmrginp, __pyx_k_Pysync2dmrginp, sizeof(__pyx_k_Pysync2dmrginp), 0, 0, 1, 1},
  {&__pyx_n_s_Pysync_from_dmrginp, __pyx_k_Pysync_from_dmrginp, sizeof(__pyx_k_Pysync_from_dmrginp), 0, 0, 1, 1},
  {&__pyx_n_s_Pyunion_StateInfo_quanta, __pyx_k_Pyunion_StateInfo_quanta, sizeof(__pyx_k_Pyunion_StateInfo_quanta), 0, 0, 1, 1},
  {&__pyx_n_s_Pyupdate_rotmat, __pyx_k_Pyupdate_rotmat, sizeof(__pyx_k_Pyupdate_rotmat), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_add_noninteracting_orbs, __pyx_k_add_noninteracting_orbs, sizeof(__pyx_k_add_noninteracting_orbs), 0, 0, 1, 1},
  {&__pyx_n_s_additional_noise, __pyx_k_additional_noise, sizeof(__pyx_k_additional_noise), 0, 0, 1, 1},
  {&__pyx_n_s_algorithm_type, __pyx_k_algorithm_type, sizeof(__pyx_k_algorithm_type), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_big, __pyx_k_big, sizeof(__pyx_k_big), 0, 0, 1, 1},
  {&__pyx_n_s_bool8, __pyx_k_bool8, sizeof(__pyx_k_bool8), 0, 0, 1, 1},
  {&__pyx_n_s_bra, __pyx_k_bra, sizeof(__pyx_k_bra), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_calc_type, __pyx_k_calc_type, sizeof(__pyx_k_calc_type), 0, 0, 1, 1},
  {&__pyx_n_s_complementary, __pyx_k_complementary, sizeof(__pyx_k_complementary), 0, 0, 1, 1},
  {&__pyx_n_s_constraint, __pyx_k_constraint, sizeof(__pyx_k_constraint), 0, 0, 1, 1},
  {&__pyx_n_s_core_energy, __pyx_k_core_energy, sizeof(__pyx_k_core_energy), 0, 0, 1, 1},
  {&__pyx_n_s_cratch_prefix, __pyx_k_cratch_prefix, sizeof(__pyx_k_cratch_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_currentRoot, __pyx_k_currentRoot, sizeof(__pyx_k_currentRoot), 0, 0, 1, 1},
  {&__pyx_n_s_davidson_tol_schedule, __pyx_k_davidson_tol_schedule, sizeof(__pyx_k_davidson_tol_schedule), 0, 0, 1, 1},
  {&__pyx_n_s_deflation_max_size, __pyx_k_deflation_max_size, sizeof(__pyx_k_deflation_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_deflation_min_size, __pyx_k_deflation_min_size, sizeof(__pyx_k_deflation_min_size), 0, 0, 1, 1},
  {&__pyx_n_s_dest, __pyx_k_dest, sizeof(__pyx_k_dest), 0, 0, 1, 1},
  {&__pyx_n_s_direct, __pyx_k_direct, sizeof(__pyx_k_direct), 0, 0, 1, 1},
  {&__pyx_n_s_dmrg, __pyx_k_dmrg, sizeof(__pyx_k_dmrg), 0, 0, 1, 1},
  {&__pyx_n_s_dmrgenv, __pyx_k_dmrgenv, sizeof(__pyx_k_dmrgenv), 0, 0, 1, 1},
  {&__pyx_n_s_do_fci, __pyx_k_do_fci, sizeof(__pyx_k_do_fci), 0, 0, 1, 1},
  {&__pyx_n_s_do_npdm_in_core, __pyx_k_do_npdm_in_core, sizeof(__pyx_k_do_npdm_in_core), 0, 0, 1, 1},
  {&__pyx_n_s_do_npdm_ops, __pyx_k_do_npdm_ops, sizeof(__pyx_k_do_npdm_ops), 0, 0, 1, 1},
  {&__pyx_n_s_dot_with_sys, __pyx_k_dot_with_sys, sizeof(__pyx_k_dot_with_sys), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_energies, __pyx_k_energies, sizeof(__pyx_k_energies), 0, 0, 1, 1},
  {&__pyx_n_s_envSites, __pyx_k_envSites, sizeof(__pyx_k_envSites), 0, 0, 1, 1},
  {&__pyx_n_s_environ, __pyx_k_environ, sizeof(__pyx_k_environ), 0, 0, 1, 1},
  {&__pyx_n_s_finish, __pyx_k_finish, sizeof(__pyx_k_finish), 0, 0, 1, 1},
  {&__pyx_n_s_gaconffile, __pyx_k_gaconffile, sizeof(__pyx_k_gaconffile), 0, 0, 1, 1},
  {&__pyx_n_s_get_braStateInfo, __pyx_k_get_braStateInfo, sizeof(__pyx_k_get_braStateInfo), 0, 0, 1, 1},
  {&__pyx_n_s_gt, __pyx_k_gt, sizeof(__pyx_k_gt), 0, 0, 1, 1},
  {&__pyx_n_s_guesstype, __pyx_k_guesstype, sizeof(__pyx_k_guesstype), 0, 0, 1, 1},
  {&__pyx_n_s_ham_type, __pyx_k_ham_type, sizeof(__pyx_k_ham_type), 0, 0, 1, 1},
  {&__pyx_n_s_haveCompops, __pyx_k_haveCompops, sizeof(__pyx_k_haveCompops), 0, 0, 1, 1},
  {&__pyx_n_s_haveNormops, __pyx_k_haveNormops, sizeof(__pyx_k_haveNormops), 0, 0, 1, 1},
  {&__pyx_n_s_hf_occ_user, __pyx_k_hf_occ_user, sizeof(__pyx_k_hf_occ_user), 0, 0, 1, 1},
  {&__pyx_n_s_hf_occupancy, __pyx_k_hf_occupancy, sizeof(__pyx_k_hf_occupancy), 0, 0, 1, 1},
  {&__pyx_kp_s_home_sunqm_workspace_program_py, __pyx_k_home_sunqm_workspace_program_py, sizeof(__pyx_k_home_sunqm_workspace_program_py), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_implicitTranspose, __pyx_k_implicitTranspose, sizeof(__pyx_k_implicitTranspose), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inp_conf, __pyx_k_inp_conf, sizeof(__pyx_k_inp_conf), 0, 0, 1, 1},
  {&__pyx_n_s_irrep_id, __pyx_k_irrep_id, sizeof(__pyx_k_irrep_id), 0, 0, 1, 1},
  {&__pyx_n_s_is_complement, __pyx_k_is_complement, sizeof(__pyx_k_is_complement), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_keep_qstates, __pyx_k_keep_qstates, sizeof(__pyx_k_keep_qstates), 0, 0, 1, 1},
  {&__pyx_n_s_keep_states, __pyx_k_keep_states, sizeof(__pyx_k_keep_states), 0, 0, 1, 1},
  {&__pyx_n_s_ket, __pyx_k_ket, sizeof(__pyx_k_ket), 0, 0, 1, 1},
  {&__pyx_n_s_lBlock, __pyx_k_lBlock, sizeof(__pyx_k_lBlock), 0, 0, 1, 1},
  {&__pyx_n_s_lastM, __pyx_k_lastM, sizeof(__pyx_k_lastM), 0, 0, 1, 1},
  {&__pyx_n_s_lblock, __pyx_k_lblock, sizeof(__pyx_k_lblock), 0, 0, 1, 1},
  {&__pyx_n_s_lowerStates, __pyx_k_lowerStates, sizeof(__pyx_k_lowerStates), 0, 0, 1, 1},
  {&__pyx_n_s_lquanta_id, __pyx_k_lquanta_id, sizeof(__pyx_k_lquanta_id), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxM, __pyx_k_maxM, sizeof(__pyx_k_maxM), 0, 0, 1, 1},
  {&__pyx_n_s_max_lanczos_dimension, __pyx_k_max_lanczos_dimension, sizeof(__pyx_k_max_lanczos_dimension), 0, 0, 1, 1},
  {&__pyx_n_s_maxiter, __pyx_k_maxiter, sizeof(__pyx_k_maxiter), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_nelec, __pyx_k_nelec, sizeof(__pyx_k_nelec), 0, 0, 1, 1},
  {&__pyx_n_s_new_npdm_code, __pyx_k_new_npdm_code, sizeof(__pyx_k_new_npdm_code), 0, 0, 1, 1},
  {&__pyx_n_s_newsys, __pyx_k_newsys, sizeof(__pyx_k_newsys), 0, 0, 1, 1},
  {&__pyx_n_s_noise, __pyx_k_noise, sizeof(__pyx_k_noise), 0, 0, 1, 1},
  {&__pyx_n_s_noise_schedule, __pyx_k_noise_schedule, sizeof(__pyx_k_noise_schedule), 0, 0, 1, 1},
  {&__pyx_n_s_noise_type, __pyx_k_noise_type, sizeof(__pyx_k_noise_type), 0, 0, 1, 1},
  {&__pyx_n_s_nparticle, __pyx_k_nparticle, sizeof(__pyx_k_nparticle), 0, 0, 1, 1},
  {&__pyx_n_s_nquanta, __pyx_k_nquanta, sizeof(__pyx_k_nquanta), 0, 0, 1, 1},
  {&__pyx_n_s_nroots, __pyx_k_nroots, sizeof(__pyx_k_nroots), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_onedot, __pyx_k_onedot, sizeof(__pyx_k_onedot), 0, 0, 1, 1},
  {&__pyx_n_s_onedot_start_cycle, __pyx_k_onedot_start_cycle, sizeof(__pyx_k_onedot_start_cycle), 0, 0, 1, 1},
  {&__pyx_n_s_oneindex_screen_tol, __pyx_k_oneindex_screen_tol, sizeof(__pyx_k_oneindex_screen_tol), 0, 0, 1, 1},
  {&__pyx_n_s_orbformat, __pyx_k_orbformat, sizeof(__pyx_k_orbformat), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_outputlevel, __pyx_k_outputlevel, sizeof(__pyx_k_outputlevel), 0, 0, 1, 1},
  {&__pyx_n_s_rBlock, __pyx_k_rBlock, sizeof(__pyx_k_rBlock), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rblock, __pyx_k_rblock, sizeof(__pyx_k_rblock), 0, 0, 1, 1},
  {&__pyx_n_s_reorder, __pyx_k_reorder, sizeof(__pyx_k_reorder), 0, 0, 1, 1},
  {&__pyx_n_s_reorderType, __pyx_k_reorderType, sizeof(__pyx_k_reorderType), 0, 0, 1, 1},
  {&__pyx_n_s_reorderfile, __pyx_k_reorderfile, sizeof(__pyx_k_reorderfile), 0, 0, 1, 1},
  {&__pyx_n_s_rmat, __pyx_k_rmat, sizeof(__pyx_k_rmat), 0, 0, 1, 1},
  {&__pyx_n_s_rotmat, __pyx_k_rotmat, sizeof(__pyx_k_rotmat), 0, 0, 1, 1},
  {&__pyx_n_s_rquanta_id, __pyx_k_rquanta_id, sizeof(__pyx_k_rquanta_id), 0, 0, 1, 1},
  {&__pyx_n_s_scratch_prefix, __pyx_k_scratch_prefix, sizeof(__pyx_k_scratch_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_sguess, __pyx_k_sguess, sizeof(__pyx_k_sguess), 0, 0, 1, 1},
  {&__pyx_n_s_si, __pyx_k_si, sizeof(__pyx_k_si), 0, 0, 1, 1},
  {&__pyx_n_s_sites, __pyx_k_sites, sizeof(__pyx_k_sites), 0, 0, 1, 1},
  {&__pyx_n_s_solution, __pyx_k_solution, sizeof(__pyx_k_solution), 0, 0, 1, 1},
  {&__pyx_n_s_solve_type, __pyx_k_solve_type, sizeof(__pyx_k_solve_type), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_spatial_to_spin, __pyx_k_spatial_to_spin, sizeof(__pyx_k_spatial_to_spin), 0, 0, 1, 1},
  {&__pyx_n_s_spin, __pyx_k_spin, sizeof(__pyx_k_spin), 0, 0, 1, 1},
  {&__pyx_n_s_spinAdapted, __pyx_k_spinAdapted, sizeof(__pyx_k_spinAdapted), 0, 0, 1, 1},
  {&__pyx_n_s_spin_orbs_symmetry, __pyx_k_spin_orbs_symmetry, sizeof(__pyx_k_spin_orbs_symmetry), 0, 0, 1, 1},
  {&__pyx_n_s_spin_to_spatial, __pyx_k_spin_to_spatial, sizeof(__pyx_k_spin_to_spatial), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_startM, __pyx_k_startM, sizeof(__pyx_k_startM), 0, 0, 1, 1},
  {&__pyx_n_s_stateInfo, __pyx_k_stateInfo, sizeof(__pyx_k_stateInfo), 0, 0, 1, 1},
  {&__pyx_n_s_storagetype, __pyx_k_storagetype, sizeof(__pyx_k_storagetype), 0, 0, 1, 1},
  {&__pyx_n_s_stranspose, __pyx_k_stranspose, sizeof(__pyx_k_stranspose), 0, 0, 1, 1},
  {&__pyx_n_s_sweep_iter_schedule, __pyx_k_sweep_iter_schedule, sizeof(__pyx_k_sweep_iter_schedule), 0, 0, 1, 1},
  {&__pyx_n_s_sweep_state_schedule, __pyx_k_sweep_state_schedule, sizeof(__pyx_k_sweep_state_schedule), 0, 0, 1, 1},
  {&__pyx_n_s_sweep_tol, __pyx_k_sweep_tol, sizeof(__pyx_k_sweep_tol), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_sys_add, __pyx_k_sys_add, sizeof(__pyx_k_sys_add), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_n_s_tot_sites, __pyx_k_tot_sites, sizeof(__pyx_k_tot_sites), 0, 0, 1, 1},
  {&__pyx_n_s_twoindex_screen_tol, __pyx_k_twoindex_screen_tol, sizeof(__pyx_k_twoindex_screen_tol), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_warmUp, __pyx_k_warmUp, sizeof(__pyx_k_warmUp), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_wfguess, __pyx_k_wfguess, sizeof(__pyx_k_wfguess), 0, 0, 1, 1},
  {&__pyx_n_s_wfn, __pyx_k_wfn, sizeof(__pyx_k_wfn), 0, 0, 1, 1},
  {&__pyx_n_s_wfnfile, __pyx_k_wfnfile, sizeof(__pyx_k_wfnfile), 0, 0, 1, 1},
  {&__pyx_n_s_wftranspose, __pyx_k_wftranspose, sizeof(__pyx_k_wftranspose), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "/home/sunqm/Software/opt/python/lib/python2.6/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "_dmrg.pyx":549
 * #################################################
 * 
 * def PyTensorProduct(RawStateInfo a, RawStateInfo b, int constraint):             # <<<<<<<<<<<<<<
 *     c = NewRawStateInfo()
 *     # constraint = 0 for NO_PARTICLE_SPIN_NUMBER_CONSTRAINT
 */
  __pyx_tuple__7 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_constraint, __pyx_n_s_c); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_PyTensorProduct, 549, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":557
 *     return c
 * 
 * def Pyupdate_rotmat(RawWavefunction wfn, RawSpinBlock sys, RawSpinBlock big,             # <<<<<<<<<<<<<<
 *                     keep_states, keep_qstates, noise):
 *     # rmat is resized in update_rotmat => makeRotateMatrix => assign_matrix_by_dm
 */
  __pyx_tuple__9 = PyTuple_Pack(7, __pyx_n_s_wfn, __pyx_n_s_sys, __pyx_n_s_big, __pyx_n_s_keep_states, __pyx_n_s_keep_qstates, __pyx_n_s_noise, __pyx_n_s_rmat); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyupdate_rotmat, 557, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":567
 *     return rmat
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):             # <<<<<<<<<<<<<<
 *     union_StateInfo_quanta(dest._this, source._this)
 *     return dest
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_s_dest, __pyx_n_s_source); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyunion_StateInfo_quanta, 567, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":571
 *     return dest
 * 
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,             # <<<<<<<<<<<<<<
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,
 */
  __pyx_tuple__13 = PyTuple_Pack(4, __pyx_n_s_environ, __pyx_n_s_si, __pyx_n_s_envSites, __pyx_n_s_haveNormops); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_PyBuildSlaterBlock_with_stateinf, 571, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":576
 *                                     haveNormops)
 * 
 * def Pysolve_wavefunction(RawSpinBlock big, nroots, dot_with_sys, warmUp,             # <<<<<<<<<<<<<<
 *                          onedot, tol, guesstype, additional_noise):
 *     cdef vector[Wavefunction] solution
 */
  __pyx_tuple__15 = PyTuple_Pack(14, __pyx_n_s_big, __pyx_n_s_nroots, __pyx_n_s_dot_with_sys, __pyx_n_s_warmUp, __pyx_n_s_onedot, __pyx_n_s_tol, __pyx_n_s_guesstype, __pyx_n_s_additional_noise, __pyx_n_s_solution, __pyx_n_s_energies, __pyx_n_s_gt, __pyx_n_s_currentRoot, __pyx_n_s_lowerStates, __pyx_n_s_wfn); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(8, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pysolve_wavefunction, 576, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":592
 *     return wfn, energies[0]
 * 
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,             # <<<<<<<<<<<<<<
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()
 */
  __pyx_tuple__17 = PyTuple_Pack(4, __pyx_n_s_sguess, __pyx_n_s_stranspose, __pyx_n_s_wfguess, __pyx_n_s_wftranspose); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyonedot_shufflesysdot, 592, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":600
 *     return wftranspose
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):             # <<<<<<<<<<<<<<
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_n_s_newsys, __pyx_n_s_keep_states, __pyx_n_s_rotmat); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyguess_rotmat, 600, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":607
 * #def Pyinitialize_defaults(fcidump, prefix, sym):
 * #    initialize_default_dmrginp(fcidump, prefix, sym)
 * def Pyinitialize_defaults(inp_conf):             # <<<<<<<<<<<<<<
 *     init_dmrginp(inp_conf)
 * 
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_s_inp_conf); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyinitialize_defaults, 607, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":610
 *     init_dmrginp(inp_conf)
 * 
 * def Pyget_last_site_id():             # <<<<<<<<<<<<<<
 *     return get_last_site_id()
 * 
 */
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pyget_last_site_id, 610, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":615
 * 
 * 
 * def Pysync2dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_dmrgenv); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pysync2dmrginp, 615, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "_dmrg.pyx":688
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 * 
 * def Pysync_from_dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_dmrgenv); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sunqm_workspace_program_py, __pyx_n_s_Pysync_from_dmrginp, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_dmrg(void); /*proto*/
PyMODINIT_FUNC init_dmrg(void)
#else
PyMODINIT_FUNC PyInit__dmrg(void); /*proto*/
PyMODINIT_FUNC PyInit__dmrg(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__dmrg(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_dmrg"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main__dmrg) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "_dmrg")) {
      if (unlikely(PyDict_SetItemString(modules, "_dmrg", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5_dmrg_RawSpinQuantum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawSpinQuantum.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawSpinQuantum", (PyObject *)&__pyx_type_5_dmrg_RawSpinQuantum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawSpinQuantum = &__pyx_type_5_dmrg_RawSpinQuantum;
  __pyx_type_5_dmrg_NewRawSpinQuantum.tp_base = __pyx_ptype_5_dmrg_RawSpinQuantum;
  if (PyType_Ready(&__pyx_type_5_dmrg_NewRawSpinQuantum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_NewRawSpinQuantum.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NewRawSpinQuantum", (PyObject *)&__pyx_type_5_dmrg_NewRawSpinQuantum) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_NewRawSpinQuantum = &__pyx_type_5_dmrg_NewRawSpinQuantum;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawStateInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawStateInfo.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawStateInfo", (PyObject *)&__pyx_type_5_dmrg_RawStateInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawStateInfo = &__pyx_type_5_dmrg_RawStateInfo;
  __pyx_type_5_dmrg_NewRawStateInfo.tp_base = __pyx_ptype_5_dmrg_RawStateInfo;
  if (PyType_Ready(&__pyx_type_5_dmrg_NewRawStateInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_NewRawStateInfo.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NewRawStateInfo", (PyObject *)&__pyx_type_5_dmrg_NewRawStateInfo) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_NewRawStateInfo = &__pyx_type_5_dmrg_NewRawStateInfo;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawSpinBlock) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawSpinBlock.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawSpinBlock", (PyObject *)&__pyx_type_5_dmrg_RawSpinBlock) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawSpinBlock = &__pyx_type_5_dmrg_RawSpinBlock;
  __pyx_type_5_dmrg_NewRawSpinBlock.tp_base = __pyx_ptype_5_dmrg_RawSpinBlock;
  if (PyType_Ready(&__pyx_type_5_dmrg_NewRawSpinBlock) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_NewRawSpinBlock.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NewRawSpinBlock", (PyObject *)&__pyx_type_5_dmrg_NewRawSpinBlock) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_NewRawSpinBlock = &__pyx_type_5_dmrg_NewRawSpinBlock;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawSparseMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawSparseMatrix.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawSparseMatrix", (PyObject *)&__pyx_type_5_dmrg_RawSparseMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawSparseMatrix = &__pyx_type_5_dmrg_RawSparseMatrix;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawWavefunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawWavefunction.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawWavefunction", (PyObject *)&__pyx_type_5_dmrg_RawWavefunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawWavefunction = &__pyx_type_5_dmrg_RawWavefunction;
  __pyx_type_5_dmrg_NewRawWavefunction.tp_base = __pyx_ptype_5_dmrg_RawWavefunction;
  if (PyType_Ready(&__pyx_type_5_dmrg_NewRawWavefunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_NewRawWavefunction.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NewRawWavefunction", (PyObject *)&__pyx_type_5_dmrg_NewRawWavefunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_NewRawWavefunction = &__pyx_type_5_dmrg_NewRawWavefunction;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawMatrix.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawMatrix", (PyObject *)&__pyx_type_5_dmrg_RawMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawMatrix = &__pyx_type_5_dmrg_RawMatrix;
  if (PyType_Ready(&__pyx_type_5_dmrg_RawRotationMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_RawRotationMatrix.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RawRotationMatrix", (PyObject *)&__pyx_type_5_dmrg_RawRotationMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_RawRotationMatrix = &__pyx_type_5_dmrg_RawRotationMatrix;
  __pyx_type_5_dmrg_NewRawRotationMatrix.tp_base = __pyx_ptype_5_dmrg_RawRotationMatrix;
  if (PyType_Ready(&__pyx_type_5_dmrg_NewRawRotationMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_5_dmrg_NewRawRotationMatrix.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "NewRawRotationMatrix", (PyObject *)&__pyx_type_5_dmrg_NewRawRotationMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5_dmrg_NewRawRotationMatrix = &__pyx_type_5_dmrg_NewRawRotationMatrix;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "_dmrg.pyx":5
 * #distutils: language = c++
 * 
 * import os             # <<<<<<<<<<<<<<
 * #from libc.stdlib cimport malloc, free
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":12
 * #from cpython cimport bool
 * from libc.string cimport memcpy
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":549
 * #################################################
 * 
 * def PyTensorProduct(RawStateInfo a, RawStateInfo b, int constraint):             # <<<<<<<<<<<<<<
 *     c = NewRawStateInfo()
 *     # constraint = 0 for NO_PARTICLE_SPIN_NUMBER_CONSTRAINT
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_1PyTensorProduct, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyTensorProduct, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":557
 *     return c
 * 
 * def Pyupdate_rotmat(RawWavefunction wfn, RawSpinBlock sys, RawSpinBlock big,             # <<<<<<<<<<<<<<
 *                     keep_states, keep_qstates, noise):
 *     # rmat is resized in update_rotmat => makeRotateMatrix => assign_matrix_by_dm
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_3Pyupdate_rotmat, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyupdate_rotmat, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":567
 *     return rmat
 * 
 * def Pyunion_StateInfo_quanta(RawStateInfo dest, RawStateInfo source):             # <<<<<<<<<<<<<<
 *     union_StateInfo_quanta(dest._this, source._this)
 *     return dest
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_5Pyunion_StateInfo_quanta, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyunion_StateInfo_quanta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":571
 *     return dest
 * 
 * def PyBuildSlaterBlock_with_stateinfo(RawSpinBlock environ, RawStateInfo si,             # <<<<<<<<<<<<<<
 *                                       envSites, haveNormops):
 *     BuildSlaterBlock_with_stateinfo(environ._this[0], si._this[0], envSites,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_7PyBuildSlaterBlock_with_stateinfo, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyBuildSlaterBlock_with_stateinf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":576
 *                                     haveNormops)
 * 
 * def Pysolve_wavefunction(RawSpinBlock big, nroots, dot_with_sys, warmUp,             # <<<<<<<<<<<<<<
 *                          onedot, tol, guesstype, additional_noise):
 *     cdef vector[Wavefunction] solution
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_9Pysolve_wavefunction, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pysolve_wavefunction, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":592
 *     return wfn, energies[0]
 * 
 * def Pyonedot_shufflesysdot(RawStateInfo sguess, RawStateInfo stranspose,             # <<<<<<<<<<<<<<
 *                            RawWavefunction wfguess):
 *     wftranspose = NewRawWavefunction()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_11Pyonedot_shufflesysdot, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyonedot_shufflesysdot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":600
 *     return wftranspose
 * 
 * def Pyguess_rotmat(RawSpinBlock newsys, keep_states):             # <<<<<<<<<<<<<<
 *     rotmat = NewRawRotationMatrix()
 *     guess_rotmat(rotmat._this, newsys._this, keep_states)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_13Pyguess_rotmat, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyguess_rotmat, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":607
 * #def Pyinitialize_defaults(fcidump, prefix, sym):
 * #    initialize_default_dmrginp(fcidump, prefix, sym)
 * def Pyinitialize_defaults(inp_conf):             # <<<<<<<<<<<<<<
 *     init_dmrginp(inp_conf)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_15Pyinitialize_defaults, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyinitialize_defaults, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":610
 *     init_dmrginp(inp_conf)
 * 
 * def Pyget_last_site_id():             # <<<<<<<<<<<<<<
 *     return get_last_site_id()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_17Pyget_last_site_id, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pyget_last_site_id, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":615
 * 
 * 
 * def Pysync2dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     #dmrginp.m_norbs =
 *     dmrginp.m_alpha = (dmrgenv.nelec + dmrgenv.spin) / 2
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_19Pysync2dmrginp, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pysync2dmrginp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":688
 *     dmrginp.m_gaconffile = dmrgenv.gaconffile
 * 
 * def Pysync_from_dmrginp(dmrgenv):             # <<<<<<<<<<<<<<
 *     dmrgenv.nelec = dmrginp.m_alpha + dmrginp.m_beta
 *     dmrgenv.spin  = dmrginp.m_alpha - dmrginp.m_beta
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_5_dmrg_21Pysync_from_dmrginp, NULL, __pyx_n_s_dmrg); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Pysync_from_dmrginp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_dmrg.pyx":1
 * #cython: boundscheck=False             # <<<<<<<<<<<<<<
 * #cython: wraparound=False
 * #distutils: language = c++
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _dmrg", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _dmrg");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_char(char value) {
    const char neg_one = (char) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(char) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(char) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(char),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
